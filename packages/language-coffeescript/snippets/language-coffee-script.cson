'.source.coffee':
  'Array Comprehension':
    'prefix': 'fora'
    'body': 'for ${1:name} in ${2:array}\n  ${0:# body...}'
  'Function (bound)':
    'prefix': 'bfun'
    'body': '(${1:args}) =>\n  ${0:# body...}'
  'Class':
    'prefix': 'cla'
    'body': 'class ${1:ClassName}${2: extends ${3:Ancestor}}\n\n  ${4:constructor: (${5:args}) ->\n    ${6:# body...}}\n  $7'
  'Else if':
    'prefix': 'elif'
    'body': 'else if ${1:condition}\n  ${0:# body...}'
  'Function':
    'prefix': 'fun'
    'body': '(${1:args}) ->\n  ${0:# body...}\n\n'
  'If .. Else':
    'prefix': 'ife'
    'body': 'if ${1:condition}\n  ${2:# body...}\nelse\n  ${3:# body...}'
  'If':
    'prefix': 'if'
    'body': 'if ${1:condition}\n  ${0:# body...}'
  'Object comprehension':
    'prefix': 'foro'
    'body': 'for ${1:key}, ${2:value} of ${3:Object}\n  ${0:# body...}'
  'Range comprehension (exclusive)':
    'prefix': 'forrex'
    'body': 'for ${1:name} in [${2:start}...${3:finish}]${4: by ${5:step}}\n  ${0:# body...}'
  'Range comprehension (inclusive)':
    'prefix': 'forr'
    'body': 'for ${1:name} in [${2:start}..${3:finish}]${4: by ${5:step}}\n  ${0:# body...}'
  'Switch':
    'prefix': 'swi'
    'body': 'switch ${1:object}\n  when ${2:value}\n    ${0:# body...}'
  'Ternary If':
    'prefix': 'ifte'
    'body': 'if ${1:condition} then ${2:value} else ${3:other}'
  'Try .. Catch':
    'prefix': 'try'
    'body': 'try\n  $1\ncatch ${2:error}\n  $3'
  'Unless':
    'prefix': 'unl'
    'body': '${1:action} unless ${2:condition}'
  'Subheader':
    'prefix': '/3'
    'body': '# $1\n# -------------------------\n$0'
  'log':
    'prefix': 'log'
    'body': 'console.log $0'
  'warn':
    'prefix': 'warn'
    'body': 'console.warn $0'
  'error':
    'prefix': 'error'
    'body': 'console.error $0'
  'require':
    'prefix': 'req'
    'body': '${1:sys} $3= require \'${2:${1:sys}}\'$4'
  'Describe block':
    'prefix': 'de',
    'body': 'describe "${1:description}", ->\n  ${2:body}'
  'It block':
    'prefix': 'i',
    'body': 'it "$1", ->\n  $2'
  'Before each':
    'prefix': 'be',
    'body': 'beforeEach ->\n  $1'
  'After each':
    'prefix': 'af',
    'body': 'afterEach ->\n  $1'
  'Expectation':
    'prefix': 'ex',
    'body': 'expect($1).to$2'
  'Range array':
    'prefix': 'ra',
    'body': '[[$1, $2], [$3, $4]]'
  'Point array':
    'prefix': 'pt',
    'body': '[$1, $2]'
  'Key-value pair':
    'prefix': 'kv',
    'body': '${1:\'${2:key}\'}: ${3:value}'
  'Create Jasmine spy':
    'prefix': 'spy',
    'body': 'jasmine.createSpy(\'${1:description}\')$2'
'.string.quoted.double.coffee:not(.string .source), .string.quoted.double.heredoc.coffee:not(.string .source)':
  'Interpolated Code':
    'prefix': '#'
    'body': '#{$1}$2'
