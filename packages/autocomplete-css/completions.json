{
  "tags": [
    "html",
    "head",
    "title",
    "base",
    "link",
    "meta",
    "style",
    "body",
    "article",
    "section",
    "nav",
    "aside",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "hgroup",
    "header",
    "footer",
    "address",
    "p",
    "hr",
    "pre",
    "blockquote",
    "ol",
    "ul",
    "menu",
    "li",
    "dl",
    "dt",
    "dd",
    "figure",
    "figcaption",
    "main",
    "search",
    "div",
    "a",
    "em",
    "strong",
    "small",
    "s",
    "cite",
    "q",
    "dfn",
    "abbr",
    "ruby",
    "rt",
    "rp",
    "data",
    "time",
    "code",
    "var",
    "samp",
    "kbd",
    "sub",
    "sup",
    "i",
    "b",
    "u",
    "mark",
    "bdi",
    "bdo",
    "span",
    "br",
    "wbr",
    "ins",
    "del",
    "picture",
    "source",
    "img",
    "iframe",
    "embed",
    "object",
    "video",
    "audio",
    "track",
    "map",
    "area",
    "table",
    "caption",
    "colgroup",
    "col",
    "tbody",
    "thead",
    "tfoot",
    "tr",
    "td",
    "th",
    "form",
    "label",
    "input",
    "button",
    "select",
    "datalist",
    "optgroup",
    "option",
    "textarea",
    "output",
    "progress",
    "meter",
    "fieldset",
    "legend",
    "details",
    "summary",
    "dialog",
    "script",
    "noscript",
    "template",
    "slot",
    "canvas",
    "applet",
    "acronym",
    "bgsound",
    "dir",
    "frame",
    "frameset",
    "noframes",
    "isindex",
    "keygen",
    "listing",
    "menuitem",
    "nextid",
    "noembed",
    "param",
    "plaintext",
    "rb",
    "rtc",
    "strike",
    "xmp",
    "basefont",
    "big",
    "blink",
    "center",
    "font",
    "marquee",
    "multicol",
    "nobr",
    "spacer",
    "tt"
  ],
  "properties": {
    "width": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The width CSS property sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area."
    },
    "display": {
      "values": [
        "block",
        "inline",
        "run-in",
        "flow",
        "flow-root",
        "table",
        "flex",
        "grid",
        "ruby",
        "list-item",
        "table-row-group",
        "table-header-group",
        "table-footer-group",
        "table-row",
        "table-cell",
        "table-column-group",
        "table-column",
        "table-caption",
        "ruby-base",
        "ruby-text",
        "ruby-base-container",
        "ruby-text-container",
        "contents",
        "none",
        "inline-block",
        "inline-table",
        "inline-flex",
        "inline-grid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The display CSS property sets whether an element is treated as a block or inline box and the layout used for its children, such as flow layout, grid or flex."
    },
    "height": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The height CSS property specifies the height of an element. By default, the property defines the height of the content area. If box-sizing is set to border-box, however, it instead determines the height of the border area."
    },
    "padding": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding CSS shorthand property sets the padding area on all four sides of an element at once."
    },
    "margin": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin CSS shorthand property sets the margin area on all four sides of an element."
    },
    "position": {
      "values": [
        "static",
        "relative",
        "absolute",
        "sticky",
        "fixed",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements."
    },
    "border": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border shorthand CSS property sets an element's border. It sets the values of border-width, border-style, and border-color."
    },
    "color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The color CSS property sets the foreground color value of an element's text and text decorations, and sets the currentcolor value. currentcolor may be used as an indirect value on other properties and is the default for other color properties, such as border-color."
    },
    "top": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The top CSS property sets the vertical position of a positioned element. This glossary(inset properties, inset property) has no effect on non-positioned elements."
    },
    "font-size": {
      "values": [
        "math",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-size CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative &lt;length&gt; units, such as em, ex, and so forth."
    },
    "left": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The left CSS property participates in specifying the horizontal position of a positioned element. This glossary(inset properties, inset property) has no effect on non-positioned elements."
    },
    "background-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-color CSS property sets the background color of an element."
    },
    "margin-top": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "font-family": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-family CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
    },
    "font-weight": {
      "values": [
        "normal",
        "bold",
        "bolder",
        "lighter",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-weight CSS property sets the weight (or boldness) of the font. The weights available depend on the font-family that is currently set."
    },
    "text-align": {
      "values": [
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent",
        "justify-all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-align CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction."
    },
    "overflow": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow CSS shorthand property sets the desired behavior when content does not fit in the element's padding box (overflows) in the horizontal and/or vertical direction."
    },
    "background": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method. Component properties not set in the background shorthand property value declaration are set to their default values."
    },
    "opacity": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency."
    },
    "line-height": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The line-height CSS property sets the height of a line box in horizontal writing modes. In vertical writing modes, it sets the width of a line box. It's commonly used to set the distance between lines of text. On block-level elements in horizontal writing modes, it specifies the preferred height of line boxes within the element, and on non-replaced inline elements, it specifies the height that is used to calculate line box height."
    },
    "border-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
    },
    "box-sizing": {
      "values": [
        "content-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The box-sizing CSS property sets how the total width and height of an element is calculated."
    },
    "z-index": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The z-index CSS property sets the z-order of a positioned element and its descendants or flex and grid items. Overlapping elements with a larger z-index cover those with a smaller one."
    },
    "cursor": {
      "values": [
        "auto",
        "default",
        "none",
        "context-menu",
        "help",
        "pointer",
        "progress",
        "wait",
        "cell",
        "crosshair",
        "text",
        "vertical-text",
        "alias",
        "copy",
        "move",
        "no-drop",
        "not-allowed",
        "grab",
        "grabbing",
        "e-resize",
        "n-resize",
        "ne-resize",
        "nw-resize",
        "s-resize",
        "se-resize",
        "sw-resize",
        "w-resize",
        "ew-resize",
        "ns-resize",
        "nesw-resize",
        "nwse-resize",
        "col-resize",
        "row-resize",
        "all-scroll",
        "zoom-in",
        "zoom-out",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cursor CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element."
    },
    "text-decoration": {
      "values": [
        "none",
        "underline",
        "overline",
        "line-through",
        "blink",
        "auto",
        "from-font",
        "solid",
        "double",
        "dotted",
        "dashed",
        "wavy",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property."
    },
    "margin-left": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin-bottom": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin-right": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "right": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The right CSS property participates in specifying the horizontal position of a positioned element. This glossary(inset properties, inset property) has no effect on non-positioned elements."
    },
    "transform": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transform CSS property lets you rotate, scale, skew, or translate an element."
    },
    "max-width": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width."
    },
    "vertical-align": {
      "values": [
        "first",
        "last",
        "baseline",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "text-top",
        "sub",
        "super",
        "top",
        "center",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The vertical-align CSS property sets vertical alignment of an inline, inline-block or table-cell box."
    },
    "box-shadow": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color."
    },
    "bottom": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The bottom CSS property participates in setting the vertical position of a positioned element. This glossary(inset properties, inset property) has no effect on non-positioned elements."
    },
    "content": {
      "values": [
        "normal",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The content CSS property replaces content with a generated value. It can be used to define what is rendered inside an element or pseudo-element. For elements, the content property specifies whether the element renders normally (normal or none) or is replaced with an image (and associated alt text). For pseudo-elements and margin boxes, content defines the content as images, text, both, or none, which determines whether the element renders at all."
    },
    "padding-left": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-left CSS property sets the width of the padding area to the left of an element."
    },
    "white-space": {
      "values": [
        "normal",
        "pre",
        "pre-wrap",
        "pre-line",
        "collapse",
        "discard",
        "preserve",
        "preserve-breaks",
        "preserve-spaces",
        "break-spaces",
        "wrap",
        "nowrap",
        "none",
        "discard-before",
        "discard-after",
        "discard-inner",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The white-space CSS property sets how Glossary(whitespace, white space) inside an element is handled."
    },
    "padding-top": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-top CSS property sets the height of the padding area on the top of an element."
    },
    "transition": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition CSS property is a shorthand property for  cssxref(transition-property) ,  cssxref(transition-duration) ,  cssxref(transition-timing-function) ,  cssxref(transition-delay) , and  cssxref(transition-behavior) ."
    },
    "font-style": {
      "values": [
        "normal",
        "italic",
        "oblique",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-style CSS property sets whether a font should be styled with a normal, italic, or oblique face from its font-family."
    },
    "min-height": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height."
    },
    "padding-right": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-right CSS property sets the width of the padding area on the right of an element."
    },
    "padding-bottom": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-bottom CSS property sets the height of the padding area on the bottom of an element."
    },
    "align-items": {
      "values": [
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS align-items property sets the align-self value on all direct children as a group. In flexbox, it controls the alignment of items on the glossary(cross axis). In grid layout, it controls the alignment of items on the block axis within their glossary(grid areas)."
    },
    "outline": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The outline CSS shorthand property sets most of the outline properties in a single declaration."
    },
    "float": {
      "values": [
        "block-start",
        "block-end",
        "inline-start",
        "inline-end",
        "snap-block",
        "snap-inline",
        "left",
        "right",
        "top",
        "bottom",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning."
    },
    "background-image": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-image CSS property sets one or more background images on an element."
    },
    "min-width": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width."
    },
    "justify-content": {
      "values": [
        "normal",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS justify-content property defines how the browser distributes space between and around content items along the Glossary(main axis) of a flex container and the inline axis of grid and multicol containers."
    },
    "border-bottom": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom shorthand CSS property sets an element's bottom border. It sets the values of border-bottom-width, border-bottom-style and border-bottom-color."
    },
    "border-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-color shorthand CSS property sets the color of an element's border."
    },
    "visibility": {
      "values": [
        "visible",
        "hidden",
        "collapse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a table."
    },
    "background-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-position CSS property sets the initial position for each background image. The position is relative to the position layer set by background-origin."
    },
    "text-transform": {
      "values": [
        "none",
        "capitalize",
        "uppercase",
        "lowercase",
        "full-width",
        "full-size-kana",
        "math-auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby."
    },
    "border-top": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top shorthand CSS property sets all the properties of an element's top border."
    },
    "flex-direction": {
      "values": [
        "row",
        "row-reverse",
        "column",
        "column-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-direction CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
    },
    "max-height": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height."
    },
    "background-size": {
      "values": [
        "auto",
        "cover",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-size CSS property sets the size of the element's background image."
    },
    "background-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-repeat CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all."
    },
    "list-style": {
      "values": [
        "inside",
        "outside",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The list-style CSS shorthand property allows you to set all the list style properties at once."
    },
    "pointer-events": {
      "values": [
        "auto",
        "bounding-box",
        "visiblePainted",
        "visibleFill",
        "visibleStroke",
        "visible",
        "painted",
        "fill",
        "stroke",
        "all",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events."
    },
    "flex-wrap": {
      "values": [
        "nowrap",
        "wrap",
        "wrap-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
    },
    "overflow-y": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-y CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content. This property may also be set by using the overflow shorthand property."
    },
    "animation": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, animation-play-state, and animation-timeline."
    },
    "border-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-width shorthand CSS property sets the width of an element's border."
    },
    "flex": {
      "values": [
        "none",
        "content",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex CSS shorthand property sets how a glossary(flex item) will grow or shrink to fit the space available in its flex container."
    },
    "font": {
      "values": [
        "normal",
        "italic",
        "oblique",
        "small-caps",
        "bolder",
        "lighter",
        "ultra-condensed",
        "extra-condensed",
        "condensed",
        "semi-condensed",
        "semi-expanded",
        "expanded",
        "extra-expanded",
        "ultra-expanded",
        "math",
        "caption",
        "icon",
        "menu",
        "message-box",
        "small-caption",
        "status-bar",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font."
    },
    "user-select": {
      "values": [
        "auto",
        "text",
        "none",
        "contain",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The user-select CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its Glossary(Chrome, chrome)), except in textboxes."
    },
    "letter-spacing": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The letter-spacing CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of letter-spacing causes characters to spread farther apart, while negative values of letter-spacing bring characters closer together."
    },
    "clear": {
      "values": [
        "inline-start",
        "inline-end",
        "block-start",
        "block-end",
        "left",
        "right",
        "top",
        "bottom",
        "both-inline",
        "both-block",
        "both",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The clear CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The clear property applies to floating and non-floating elements."
    },
    "text-overflow": {
      "values": [
        "clip",
        "ellipsis",
        "fade",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-overflow CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis (…), or display a custom string."
    },
    "border-left": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-left shorthand CSS property sets all the properties of an element's left border."
    },
    "overflow-x": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-x CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content. This property may also be set by using the overflow shorthand property."
    },
    "border-right": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-right shorthand CSS property sets all the properties of an element's right border."
    },
    "fill": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The fill CSS property defines how SVG text content and the interior canvas of SVG shapes are filled or painted. If present, it overrides the element's fill attribute."
    },
    "border-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-style shorthand CSS property sets the line style for all four sides of an element's border."
    },
    "flex-grow": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-grow CSS property sets the flex grow factor, which specifies how much of the flex container's positive free space, if any, should be assigned to the flex item's main size."
    },
    "flex-shrink": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, the flex items can shrink to fit according to their flex-shrink value. Each flex line's negative free space is distributed between the line's flex items that have a flex-shrink value greater than 0."
    },
    "word-wrap": {
      "values": [
        "normal",
        "break-word",
        "anywhere",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether the UA may break at otherwise disallowed points within a line to prevent overflow, when an otherwise-unbreakable string is too long to fit within the line box."
    },
    "word-break": {
      "values": [
        "normal",
        "break-all",
        "keep-all",
        "manual",
        "auto-phrase",
        "break-word",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The word-break CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box."
    },
    "border-top-right-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top-right-radius CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "transform-origin": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transform-origin CSS property sets the origin for an element's transformations."
    },
    "border-top-left-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top-left-radius CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-bottom-right-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-bottom-left-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "clip": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The clip CSS property defines a visible portion of an element. The clip property applies only to absolutely positioned elements — that is, elements with position,position:absolute or position,position:fixed."
    },
    "gap": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The gap CSS shorthand property sets the gaps (also called gutters) between rows and columns. This property applies to multi-column, flex, and grid containers."
    },
    "align-self": {
      "values": [
        "auto",
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The align-self CSS property overrides a grid or flex item's align-items value. In grid, it aligns the item inside the glossary(Grid Areas, grid area). In flexbox, it aligns the item on the glossary(cross axis)."
    },
    "border-collapse": {
      "values": [
        "separate",
        "collapse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-collapse CSS property sets whether cells inside a table have shared or separate borders."
    },
    "list-style-type": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element."
    },
    "animation-timing-function": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-timing-function CSS property sets how an animation progresses through the duration of each cycle."
    },
    "object-fit": {
      "values": [
        "fill",
        "none",
        "contain",
        "cover",
        "scale-down",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The object-fit CSS property sets how the content of a replaced element, such as an img or video, should be resized to fit its container."
    },
    "text-shadow": {
      "values": [
        "none",
        "inset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color."
    },
    "filter": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The filter CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders."
    },
    "appearance": {
      "values": [
        "none",
        "auto",
        "base",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The appearance CSS property is used to display UI elements with platform-specific styling, based on the operating system's theme."
    },
    "animation-duration": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-duration CSS property sets the length of time that an animation takes to complete one cycle."
    },
    "direction": {
      "values": [
        "ltr",
        "rtl",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The direction CSS property sets the direction of text, table columns, and horizontal overflow. Use rtl for languages written from right to left (like Hebrew or Arabic), and ltr for those written from left to right (like English and most other languages)."
    },
    "animation-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-name CSS property specifies the names of one or more @keyframes at-rules that describe the animation to apply to an element. Multiple @keyframe at-rules are specified as a comma-separated list of names. If the specified name does not match any @keyframe at-rule, no properties are animated."
    },
    "outline-offset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element."
    },
    "border-top-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top."
    },
    "stroke-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-width CSS property defines the width of a stroke applied to the SVG shape. If present, it overrides the element's stroke-width attribute."
    },
    "flex-basis": {
      "values": [
        "content",
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-basis CSS property sets the initial main size of a glossary(flex item). It sets the size of the content box unless otherwise set with box-sizing."
    },
    "border-bottom-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom."
    },
    "touch-action": {
      "values": [
        "auto",
        "none",
        "pan-x",
        "pan-left",
        "pan-right",
        "pan-y",
        "pan-up",
        "pan-down",
        "pinch-zoom",
        "manipulation",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The touch-action CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser)."
    },
    "background-clip": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-clip CSS property sets whether an element's background extends underneath its border box, padding box, or content box."
    },
    "transition-duration": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition-duration CSS property sets the length of time a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur."
    },
    "stroke": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke CSS property defines the color or SVG paint server used to draw an element's stroke. As such, stroke only has an effect on elements that can be given a stroke (for example, SVGElement('rect') or SVGElement('ellipse')); see the page on the SVG SVGAttr('stroke') attribute for a complete list. When declared, the CSS value overrides any value of the element's stroke SVG attribute."
    },
    "transition-property": {
      "values": [
        "none",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition-property CSS property sets the CSS properties to which a transition effect should be applied."
    },
    "grid-template-columns": {
      "values": [
        "none",
        "subgrid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-template-columns CSS property defines the line names and track sizing functions of the glossary(grid column, grid columns)."
    },
    "order": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order. Items not given an explicit order value are assigned the default value of 0."
    },
    "transition-timing-function": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition-timing-function CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect."
    },
    "animation-delay": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-delay CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation."
    },
    "align-content": {
      "values": [
        "normal",
        "first",
        "last",
        "baseline",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross axis, or a grid or block-level element's block axis."
    },
    "text-indent": {
      "values": [
        "hanging",
        "each-line",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-indent CSS property sets the length of empty space (indentation) that is put before lines of text in a block."
    },
    "clip-path": {
      "values": [
        "fill-box",
        "stroke-box",
        "view-box",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden."
    },
    "text-rendering": {
      "values": [
        "auto",
        "optimizeSpeed",
        "optimizeLegibility",
        "geometricPrecision",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text."
    },
    "border-left-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left."
    },
    "scrollbar-width": {
      "values": [
        "auto",
        "thin",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scrollbar-width property allows the author to set the desired thickness of an element's scrollbars when they are shown."
    },
    "will-change": {
      "values": [
        "auto",
        "scroll-position",
        "contents",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The will-change CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required."
    },
    "border-spacing": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-spacing CSS property sets the distance between the borders of adjacent cells in a table. This property applies only when border-collapse is separate."
    },
    "resize": {
      "values": [
        "none",
        "both",
        "horizontal",
        "vertical",
        "block",
        "inline",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The resize CSS property sets whether an element is resizable, and if so, in which directions."
    },
    "overflow-wrap": {
      "values": [
        "normal",
        "break-word",
        "anywhere",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-wrap CSS property applies to text, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box."
    },
    "border-right-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right."
    },
    "animation-iteration-count": {
      "values": [
        "infinite",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-iteration-count CSS property sets the number of times an animation sequence should be played before stopping."
    },
    "flex-flow": {
      "values": [
        "row",
        "row-reverse",
        "column",
        "column-reverse",
        "nowrap",
        "wrap",
        "wrap-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flex-flow CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior."
    },
    "animation-fill-mode": {
      "values": [
        "none",
        "forwards",
        "backwards",
        "both",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-fill-mode CSS property sets how a CSS animation applies styles to its target before and after its execution."
    },
    "transition-delay": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition-delay CSS property specifies the duration to wait before starting a property's transition effect when its value changes."
    },
    "column-gap": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-gap CSS property sets the size of the gap (Gutters,gutter) between an element's columns."
    },
    "font-variant": {
      "values": [
        "normal",
        "none",
        "common-ligatures",
        "no-common-ligatures",
        "discretionary-ligatures",
        "no-discretionary-ligatures",
        "historical-ligatures",
        "no-historical-ligatures",
        "contextual",
        "no-contextual",
        "small-caps",
        "all-small-caps",
        "petite-caps",
        "all-petite-caps",
        "unicase",
        "titling-caps",
        "stylistic()",
        "historical-forms",
        "styleset(",
        "character-variant(",
        "swash()",
        "ornaments()",
        "annotation()",
        "lining-nums",
        "oldstyle-nums",
        "proportional-nums",
        "tabular-nums",
        "diagonal-fractions",
        "stacked-fractions",
        "ordinal",
        "slashed-zero",
        "jis78",
        "jis83",
        "jis90",
        "jis04",
        "simplified",
        "traditional",
        "full-width",
        "proportional-width",
        "ruby",
        "sub",
        "super",
        "text",
        "emoji",
        "unicode",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant CSS shorthand property allows you to set all the font variants for a font."
    },
    "border-bottom-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom-width CSS property sets the width of the bottom border of an element."
    },
    "stroke-dashoffset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dashoffset CSS property defines an offset for the starting point of the rendering of an SVG element's associated dash array. If present, it overrides the element's stroke-dashoffset attribute."
    },
    "zoom": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The zoom CSS property can be used to control the magnification level of an element."
    },
    "outline-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS outline-width property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border."
    },
    "inset": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset CSS property is a shorthand that corresponds to the top, right, bottom, and/or left properties. It has the same multi-value syntax of the margin shorthand."
    },
    "outline-color": {
      "values": [
        "auto",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The outline-color CSS property sets the color of an element's outline."
    },
    "stroke-dasharray": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dasharray CSS property defines a pattern of dashes and gaps used in the painting of the SVG shape's stroke. If present, it overrides the element's stroke-dasharray attribute."
    },
    "border-left-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-left-width CSS property sets the width of the left border of an element."
    },
    "border-right-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-right-width CSS property sets the width of the right border of an element."
    },
    "border-top-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top-width CSS property sets the width of the top border of an element."
    },
    "backdrop-filter": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect the element or its background needs to be transparent or partially transparent."
    },
    "aspect-ratio": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The aspect-ratio CSS property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio. The specified glossary(aspect ratio) is used in the calculation of auto sizes and some other layout functions."
    },
    "grid-column": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-column CSS shorthand property specifies a grid item's size and location within a glossary(grid column) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its glossary(grid areas, grid area)."
    },
    "text-size-adjust": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property."
    },
    "row-gap": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The row-gap CSS property sets the size of the gap (gutters,gutter) between an element's rows."
    },
    "grid-template-rows": {
      "values": [
        "none",
        "subgrid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-template-rows CSS property defines the line names and track sizing functions of the glossary(gridrow, grid rows)."
    },
    "outline-style": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The outline-style CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border."
    },
    "font-feature-settings": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-feature-settings CSS property controls advanced typographic features in OpenType fonts."
    },
    "margin-inline-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-inline-start CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "font-stretch": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-stretch CSS property selects a normal, condensed, or expanded face from a font."
    },
    "backface-visibility": {
      "values": [
        "visible",
        "hidden",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The backface-visibility CSS property sets whether the back face of an element is visible when turned towards the user."
    },
    "contain": {
      "values": [
        "none",
        "strict",
        "content",
        "size",
        "inline-size",
        "layout",
        "style",
        "paint",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree."
    },
    "border-bottom-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-bottom-style CSS property sets the line style of an element's bottom border."
    },
    "forced-color-adjust": {
      "values": [
        "auto",
        "none",
        "preserve-parent-color",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The forced-color-adjust CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS."
    },
    "table-layout": {
      "values": [
        "auto",
        "fixed",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The table-layout CSS property sets the algorithm used to lay out table cells, rows, and columns."
    },
    "grid-gap": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Shorthand for the gap property."
    },
    "animation-direction": {
      "values": [
        "normal",
        "reverse",
        "alternate",
        "alternate-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-direction CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward."
    },
    "grid-area": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-area CSS shorthand property specifies a grid item's size and location within a glossary(grid, grid) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its glossary(grid areas, grid area)."
    },
    "text-decoration-line": {
      "values": [
        "none",
        "underline",
        "overline",
        "line-through",
        "blink",
        "spelling-error",
        "grammar-error",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-line CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline."
    },
    "margin-inline-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "text-wrap": {
      "values": [
        "wrap",
        "nowrap",
        "auto",
        "balance",
        "stable",
        "pretty",
        "avoid-orphans",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-wrap CSS shorthand property controls how text inside an element is wrapped. The different values provide:"
    },
    "padding-inline-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "mask-image": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-image CSS property sets the image that is used as mask layer for an element."
    },
    "color-scheme": {
      "values": [
        "normal",
        "light",
        "dark",
        "only",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in. User agents change the following aspects of the UI chrome to match the used color scheme:"
    },
    "object-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The object-position CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background."
    },
    "mask": {
      "values": [
        "no-clip",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points."
    },
    "padding-inline": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-inline CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    "justify-items": {
      "values": [
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "left",
        "right",
        "legacy",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis."
    },
    "scroll-behavior": {
      "values": [
        "auto",
        "smooth",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs."
    },
    "grid-row": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-row CSS shorthand property specifies a grid item's size and location within a glossary(grid row) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its glossary(grid areas, grid area)."
    },
    "padding-block": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-block CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-inline-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "unicode-bidi": {
      "values": [
        "normal",
        "embed",
        "isolate",
        "bidi-override",
        "isolate-override",
        "plaintext",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The unicode-bidi CSS property, together with the direction property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The unicode-bidi property overrides this algorithm and allows the developer to control the text embedding."
    },
    "text-decoration-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-color CSS property sets the color of decorations added to text by  cssxref(text-decoration-line) ."
    },
    "background-position-x": {
      "values": [
        "center",
        "left",
        "right",
        "x-start",
        "x-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-position-x CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by background-origin."
    },
    "margin-block-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation."
    },
    "justify-self": {
      "values": [
        "auto",
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS justify-self property sets the way a box is justified inside its alignment container along the appropriate axis."
    },
    "scroll-snap-type": {
      "values": [
        "none",
        "block",
        "inline",
        "both",
        "mandatory",
        "proximity",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-snap-type CSS property is set on a glossary(scroll container), opting it into scroll snapping by setting the direction and strictness of snap point enforcement within the snap port."
    },
    "border-top-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-top-style CSS property sets the line style of an element's top border."
    },
    "caret-color": {
      "values": [
        "auto",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The caret-color CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. This is sometimes referred to as the text input cursor. The caret appears in elements such as input or those with the contenteditable attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property."
    },
    "word-spacing": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The word-spacing CSS property sets the length of space between words and between tags."
    },
    "margin-block-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation."
    },
    "inset-inline-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "font-variation-settings": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variation-settings CSS property provides low-level control over variable font characteristics by letting you specify the four letter axis names of the characteristics you want to vary along with their values."
    },
    "speak": {
      "values": [
        "auto",
        "never",
        "always",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The speak property determines whether or not to render text aurally."
    },
    "transform-style": {
      "values": [
        "flat",
        "preserve-3d",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element."
    },
    "grid-template-areas": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-template-areas CSS property specifies named glossary(grid areas), establishing the cells in the grid and assigning them names."
    },
    "margin-inline": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-inline CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    "fill-opacity": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The fill-opacity CSS property defines the opacity of the painting operation (color, gradient, pattern, etc.) applied to SVG shapes or text content elements to fill the element. The property defines the opacity of the element's fill only; it does not affect the stroke. If present, it overrides the element's fill-opacity attribute."
    },
    "animation-play-state": {
      "values": [
        "running",
        "paused",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-play-state CSS property sets whether an animation is running or paused."
    },
    "grid-auto-flow": {
      "values": [
        "row",
        "column",
        "row-reverse",
        "column-reverse",
        "dense",
        "wrap-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid."
    },
    "margin-block": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-block CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    "all": {
      "values": [
        "initial",
        "inherit",
        "unset",
        "revert",
        "revert-layer"
      ],
      "description": "The all shorthand CSS property resets all of an element's properties except unicode-bidi, direction, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin."
    },
    "counter-increment": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The counter-increment CSS property can be used to increase or decrease the value of the named CSS counters by the specified values, or to prevent all counters or an individual counter's value from being changed."
    },
    "hyphens": {
      "values": [
        "none",
        "manual",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate."
    },
    "isolation": {
      "values": [
        "auto",
        "isolate",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The isolation CSS property determines whether an element must create a new glossary(stacking context)."
    },
    "inset-inline-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-end-end-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "border-start-start-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "grid-column-gap": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Shorthand for the column-gap property."
    },
    "border-end-start-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "border-start-end-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "list-style-position": {
      "values": [
        "inside",
        "outside",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The list-style-position CSS property sets the position of the ::marker relative to a list item."
    },
    "inline-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inline-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode."
    },
    "block-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The block-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode."
    },
    "inset-block-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "counter-reset": {
      "values": [
        "reversed(",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The counter-reset CSS property creates named CSS counters and initializes them to a specific value. It supports creating counters that count up from one to the number of elements, as well as those that count down from the number of elements to one."
    },
    "min-inline-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode."
    },
    "perspective": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The perspective CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective."
    },
    "scrollbar-color": {
      "values": [
        "auto",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb."
    },
    "border-left-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-left-style CSS property sets the line style of an element's left border."
    },
    "padding-block-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-block-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "stroke-linecap": {
      "values": [
        "butt",
        "round",
        "square",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-linecap CSS property defines the shape to be used at the end of open subpaths of SVG elements' unclosed strokes. If present, it overrides the element's stroke-linecap attribute."
    },
    "min-block-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The min-block-size CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode."
    },
    "tab-size": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The tab-size CSS property is used to customize the width of tab characters (U+0009)."
    },
    "max-inline-size": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The max-inline-size CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the max-width or the max-height property, depending on the value of writing-mode."
    },
    "max-block-size": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The max-block-size CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by writing-mode. That is, if the writing direction is horizontal, then max-block-size is equivalent to max-height; if the writing direction is vertical, max-block-size is the same as max-width."
    },
    "mask-size": {
      "values": [
        "auto",
        "cover",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-size CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio."
    },
    "background-attachment": {
      "values": [
        "scroll",
        "fixed",
        "local",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-attachment CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block."
    },
    "border-inline-start": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-start CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet."
    },
    "border-inline-end": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-end CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet."
    },
    "border-right-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-right-style CSS property sets the line style of an element's right border."
    },
    "mask-composite": {
      "values": [
        "add",
        "subtract",
        "intersect",
        "exclude",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it."
    },
    "inset-inline": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-inline CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "quotes": {
      "values": [
        "auto",
        "none",
        "match-parent",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS quotes property sets how the browser should render quotation marks that are automatically added to the HTML q element or added using the open-quotes or close-quotes (or omitted using the no-open-quote and no-close-quote) values of the of the CSS content property."
    },
    "scroll-snap-align": {
      "values": [
        "none",
        "start",
        "end",
        "center",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-snap-align property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snap port (as the alignment container)."
    },
    "background-position-y": {
      "values": [
        "center",
        "top",
        "bottom",
        "y-start",
        "y-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-position-y CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by background-origin."
    },
    "mix-blend-mode": {
      "values": [
        "normal",
        "multiply",
        "screen",
        "overlay",
        "darken",
        "lighten",
        "color-dodge",
        "color-burn",
        "hard-light",
        "soft-light",
        "difference",
        "exclusion",
        "hue",
        "saturation",
        "color",
        "luminosity",
        "plus-darker",
        "plus-lighter",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background."
    },
    "stroke-miterlimit": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-miterlimit CSS property defines a limit on the ratio of the miter length to the CSSxref(stroke-width)  when the shape to be used at the corners of an SVG element's stroked path is a mitered join. If the limit defined by this property is exceeded, the join is converted from miter to bevel, thus making the corner appear truncated."
    },
    "border-block-end": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-end CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet."
    },
    "mask-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-position CSS property sets the initial position, relative to the mask position layer set by mask-origin, for each defined mask image."
    },
    "background-blend-mode": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-blend-mode CSS property sets how an element's background images should blend with each other and with the element's background color."
    },
    "border-block-start": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-start CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet."
    },
    "inset-block": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "image-rendering": {
      "values": [
        "auto",
        "smooth",
        "high-quality",
        "pixelated",
        "crisp-edges",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The image-rendering CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants."
    },
    "inset-block-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "container": {
      "values": [
        "none",
        "normal",
        "size",
        "inline-size",
        "scroll-state",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The container shorthand CSS property establishes the element as a query container and specifies the name and type of the containment context used in a container query."
    },
    "background-origin": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The background-origin CSS property sets the background's origin: from the border start, inside the border, or inside the padding."
    },
    "font-variant-ligatures": {
      "values": [
        "normal",
        "none",
        "common-ligatures",
        "no-common-ligatures",
        "discretionary-ligatures",
        "no-discretionary-ligatures",
        "historical-ligatures",
        "no-historical-ligatures",
        "contextual",
        "no-contextual",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-ligatures CSS property controls which Glossary(ligature, ligatures) and Glossary(contextual forms) are used in the textual content of the elements it applies to. This leads to more harmonized forms in the resulting text."
    },
    "stroke-opacity": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-opacity CSS property defines the opacity of an SVG shape's stroke. The effect is identical to that of CSSxref('opacity'), except it is applied only to the stroke, not to the entire element. If present, it overrides the element's stroke-opacity attribute."
    },
    "place-content": {
      "values": [
        "normal",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The place-content CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the align-content and justify-content properties) in a relevant layout system such as Grid or Flexbox."
    },
    "mask-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-repeat CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all."
    },
    "scroll-padding": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding shorthand property sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element."
    },
    "grid-auto-rows": {
      "values": [
        "minmax(",
        "fit-content(",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-auto-rows CSS property specifies the size of an implicitly-created grid row glossary(grid tracks, track) or pattern of tracks."
    },
    "text-underline-offset": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position."
    },
    "grid-row-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-row-start CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its glossary(grid areas, grid area)."
    },
    "column-count": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-count CSS property breaks an element's content into the specified number of columns."
    },
    "text-decoration-thickness": {
      "values": [
        "auto",
        "from-font",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-thickness CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline."
    },
    "grid-column-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-column-start CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the glossary(grid areas, grid area)."
    },
    "overflow-anchor": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-anchor CSS property provides a way to opt out of the browser's scroll anchoring behavior, which adjusts scroll position to minimize content shifts."
    },
    "caption-side": {
      "values": [
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The caption-side CSS property puts the content of a table's caption on the specified side. The values are relative to the writing-mode of the table."
    },
    "place-items": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The CSS place-items shorthand property aligns items along both the block and inline directions at once. It sets the values of the align-items and justify-items properties. If the second value is not set, the first value is also used for it."
    },
    "grid-row-gap": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Shorthand for the row-gap property."
    },
    "page-break-inside": {
      "values": [
        "avoid",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The page-break-inside CSS property adjusts page breaks inside the current element."
    },
    "border-image": {
      "values": [
        "none",
        "fill",
        "auto",
        "stretch",
        "repeat",
        "round",
        "space",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image CSS property draws an image around a given element. It replaces the element's regular border."
    },
    "grid-auto-columns": {
      "values": [
        "minmax(",
        "fit-content(",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-auto-columns CSS property specifies the size of an implicitly-created grid column glossary(grid tracks, track) or pattern of tracks."
    },
    "container-type": {
      "values": [
        "normal",
        "size",
        "inline-size",
        "scroll-state",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "An element can be established as a query container for container size queries using the container-type CSS property. container-type is used to define the type of size containment used in a container query."
    },
    "grid-column-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-column-end CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its glossary(grid areas, grid area)."
    },
    "stop-opacity": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stop-opacity CSS property defines the opacity of a given color gradient stop in the SVG stop element within an SVG gradient. If present, it overrides the element's stop-opacity attribute."
    },
    "r": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The r CSS property defines the radius of a circle. It can only be used with the SVG circle element. If present, it overrides the circle's r attribute."
    },
    "line-break": {
      "values": [
        "auto",
        "loose",
        "normal",
        "strict",
        "anywhere",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The line-break CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols."
    },
    "list-style-image": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The list-style-image CSS property sets an image to be used as the list item marker."
    },
    "text-decoration-skip": {
      "values": [
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-skip CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors."
    },
    "content-visibility": {
      "values": [
        "visible",
        "auto",
        "hidden",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The content-visibility CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster."
    },
    "cx": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cx CSS property defines the x-axis center point of an SVG circle or ellipse element. If present, it overrides the element's cx attribute."
    },
    "cy": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cy CSS property defines the y-axis center point of an SVG circle or ellipse elements. If present, it overrides the element's cy attribute."
    },
    "scale": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    "grid-row-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-row-end CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its glossary(grid areas, grid area)."
    },
    "scrollbar-gutter": {
      "values": [
        "auto",
        "stable",
        "both-edges",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed."
    },
    "font-variant-numeric": {
      "values": [
        "normal",
        "lining-nums",
        "oldstyle-nums",
        "proportional-nums",
        "tabular-nums",
        "diagonal-fractions",
        "stacked-fractions",
        "ordinal",
        "slashed-zero",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers."
    },
    "page-break-after": {
      "values": [
        "auto",
        "always",
        "avoid",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The page-break-after CSS property adjusts page breaks after the current element."
    },
    "stroke-linejoin": {
      "values": [
        "crop",
        "arcs",
        "miter",
        "bevel",
        "round",
        "fallback",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-linejoin CSS property defines the shape to be used at the corners of an SVG element's stroked paths. If present, it overrides the element's stroke-linejoin attribute."
    },
    "fill-rule": {
      "values": [
        "nonzero",
        "evenodd",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The fill-rule CSS property defines the rule used to determine which parts of the SVG shape's canvas are included inside a shape to be filled. If present, it overrides the element's fill-rule attribute."
    },
    "empty-cells": {
      "values": [
        "show",
        "hide",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The empty-cells CSS property sets whether borders and backgrounds appear around table cells that have no visible content."
    },
    "perspective-origin": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The perspective-origin CSS property determines the position at which the viewer is looking. It is used as the vanishing point by the perspective property."
    },
    "rotate": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform property."
    },
    "y": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The y CSS property defines the y-axis coordinate of the top left corner of the SVG rect shape, image image, foreignObject viewport and nested svg viewport relative to the nearest <svg> ancestor's user coordinate system. If present, it overrides the element's y attribute."
    },
    "columns": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The columns CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths."
    },
    "x": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The x CSS property defines the x-axis coordinate of the top left corner of the SVG rect shape, image image, foreignObject viewport or nested svg viewport relative to the nearest <svg> ancestor's user coordinate system. If present, it overrides the element's x attribute."
    },
    "scroll-snap-stop": {
      "values": [
        "normal",
        "always",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-snap-stop CSS property defines whether or not the scroll container is allowed to pass over possible snap positions."
    },
    "text-decoration-style": {
      "values": [
        "solid",
        "double",
        "dotted",
        "dashed",
        "wavy",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-style CSS property sets the style of the lines specified by  cssxref(text-decoration-line) . The style applies to all lines that are set with text-decoration-line."
    },
    "break-inside": {
      "values": [
        "auto",
        "avoid",
        "avoid-page",
        "avoid-column",
        "avoid-region",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The break-inside CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored."
    },
    "text-decoration-skip-ink": {
      "values": [
        "auto",
        "none",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders."
    },
    "orphans": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The orphans CSS property sets the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column."
    },
    "column-width": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-width CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the column-width value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width."
    },
    "widows": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The widows CSS property sets the minimum number of lines in a block container that must be shown at the top of a page, region, or column."
    },
    "border-inline-end-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-end-width CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "text-align-last": {
      "values": [
        "auto",
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-align-last CSS property sets how the last line of a block or a line, right before a forced line break, is aligned."
    },
    "box-decoration-break": {
      "values": [
        "slice",
        "clone",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages."
    },
    "border-inline-start-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-start-width CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "scroll-padding-top": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "column-rule": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-rule shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout."
    },
    "stop-color": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stop-color CSS property defines the color to use for an SVG stop element within a gradient. If present, it overrides the element's stop-color attribute."
    },
    "writing-mode": {
      "values": [
        "horizontal-tb",
        "vertical-rl",
        "vertical-lr",
        "sideways-rl",
        "sideways-lr",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The writing-mode CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (html element for HTML documents)."
    },
    "flood-opacity": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flood-opacity CSS property defines the opacity of the current filter primitive subregion in feFlood and feDropShadow elements within a filter. If present, it overrides the element's flood-opacity attribute."
    },
    "mask-mode": {
      "values": [
        "alpha",
        "luminance",
        "match-source",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-mode CSS property sets whether the mask reference defined by mask-image is treated as a luminance or alpha mask."
    },
    "container-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The container-name CSS property specifies a list of query container names used by the [@container](/en-US/docs/Web/CSS/@container) at-rule in a container query."
    },
    "grid-template": {
      "values": [
        "none",
        "subgrid",
        "minmax(",
        "fit-content(",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid-template CSS property is a shorthand property for defining glossary(grid column, grid columns), glossary(gridrow, grid rows), and glossary(grid areas, grid areas)."
    },
    "page-break-before": {
      "values": [
        "auto",
        "always",
        "avoid",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The page-break-before CSS property adjusts page breaks before the current element."
    },
    "column-fill": {
      "values": [
        "auto",
        "balance",
        "balance-all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-fill CSS property controls how an element's contents are balanced when broken into columns."
    },
    "border-block-start-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-start-width CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "place-self": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The place-self CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the align-self and justify-self properties). This property applies to block-level boxes, absolutely-positioned boxes, and grid items. If the second value is not present, the first value is also used for it."
    },
    "translate": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    "border-block-end-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-end-width CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "mask-type": {
      "values": [
        "luminance",
        "alpha",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-type CSS property sets whether an SVG mask element is used as a luminance or an alpha mask. It applies to the <mask> element itself."
    },
    "shape-outside": {
      "values": [
        "none",
        "margin-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-outside CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than rectangular boxes."
    },
    "text-underline-position": {
      "values": [
        "auto",
        "from-font",
        "under",
        "left",
        "right",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value."
    },
    "font-kerning": {
      "values": [
        "auto",
        "normal",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-kerning CSS property sets the use of the kerning information stored in a font."
    },
    "font-size-adjust": {
      "values": [
        "none",
        "ex-height",
        "cap-height",
        "ch-width",
        "ic-width",
        "ic-height",
        "from-font",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-size-adjust CSS property provides a way to modify the size of lowercase letters relative to the size of uppercase letters, which defines the overall font-size. This property is useful for situations where font fallback can occur."
    },
    "transform-box": {
      "values": [
        "content-box",
        "border-box",
        "fill-box",
        "stroke-box",
        "view-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transform-box CSS property defines the layout box to which the transform, individual transform properties translate, scale, and rotate, and transform-origin properties relate."
    },
    "border-inline-start-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-end-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-end-color CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "accent-color": {
      "values": [
        "auto",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The accent-color CSS property sets the accent color for user-interface controls generated by some elements."
    },
    "border-block-start-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "text-anchor": {
      "values": [
        "start",
        "middle",
        "end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-anchor CSS property aligns a box containing a string of text where the wrapping area is determined from the inline-size property, and the text is then placed relative to the anchor point of the element, which is defined using the SVGAttr('x') and SVGAttr('y') (or SVGAttr('dx') and SVGAttr('dy')) attributes. If present, the value of the CSS property overrides any value of the element's text-anchor attribute."
    },
    "column-rule-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-rule-color CSS property sets the color of the line drawn between columns in a multi-column layout."
    },
    "border-image-source": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image-source CSS property sets the source image used to create an element's border image."
    },
    "border-image-slice": {
      "values": [
        "fill",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image-slice CSS property divides the image specified by border-image-source into regions. These regions form the components of an element's border image."
    },
    "scroll-padding-left": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "column-rule-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-rule-style CSS property sets the style of the line drawn between columns in a multi-column layout."
    },
    "font-synthesis": {
      "values": [
        "none",
        "weight",
        "style",
        "small-caps",
        "position",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-synthesis shorthand CSS property lets you specify whether or not the browser may synthesize the bold, italic, small-caps, and/or subscript and superscript typefaces when they are missing in the specified font-family."
    },
    "clip-rule": {
      "values": [
        "nonzero",
        "evenodd",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The clip-rule CSS property defines how to determine which pixels in a mask's box are inside the clipping shape defined by a clip path, and which are outside, when parts of the path overlap other parts. Specifically, it chooses between the non-zero and even-odd methods of determining inclusion. clip-rule can be applied to all SVG elements, but only has an effect on those which are part of a clipping path. CSS values of the clip-rule property can override SVG values of the clip-rule attribute."
    },
    "border-block-start-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-start-color CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "overscroll-behavior-inline": {
      "values": [
        "contain",
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached."
    },
    "overscroll-behavior-block": {
      "values": [
        "contain",
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached."
    },
    "overflow-clip-margin": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-clip-margin CSS property determines how far outside its bounds an element with [overflow: clip](/en-US/docs/Web/CSS/overflow) may be painted before being clipped. The bound defined by this property is called the overflow clip edge of the box."
    },
    "border-block-end-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-end-style CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "shape-rendering": {
      "values": [
        "auto",
        "optimizeSpeed",
        "crispEdges",
        "geometricPrecision",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-rendering CSS property provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles."
    },
    "border-block": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet."
    },
    "border-image-width": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image-width CSS property sets the width of an element's border image."
    },
    "border-inline-end-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-end-color CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "dominant-baseline": {
      "values": [
        "auto",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "hanging",
        "text-top",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The dominant-baseline CSS property specifies the specific baseline used to align the box's text and inline-level contents. It also indicates the default alignment baseline of any boxes participating in baseline alignment in the box's alignment context. If present, it overrides the shape's dominant-baseline attribute."
    },
    "break-after": {
      "values": [
        "auto",
        "avoid",
        "always",
        "all",
        "avoid-page",
        "page",
        "left",
        "right",
        "recto",
        "verso",
        "avoid-column",
        "column",
        "avoid-region",
        "region",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The break-after CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored."
    },
    "scroll-padding-inline": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-inline shorthand property sets the scroll padding of an element in the inline dimension."
    },
    "scroll-padding-block": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-block shorthand property sets the scroll padding of an element in the block dimension."
    },
    "border-image-repeat": {
      "values": [
        "stretch",
        "repeat",
        "round",
        "space",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image-repeat CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword fill in the border-image-slice property."
    },
    "column-span": {
      "values": [
        "none",
        "all",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-span CSS property makes it possible for an element to span across all columns when its value is set to all."
    },
    "scroll-padding-block-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "vector-effect": {
      "values": [
        "none",
        "non-scaling-stroke",
        "non-scaling-size",
        "non-rotation",
        "fixed-position",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The vector-effect CSS property suppresses specific transformation effects in SVG, thus permitting effects like a road on a map staying the same width no matter how the map is zoomed, or allowing a diagram key to retain its position and size regardless of other transforms. It can only be used with SVG elements that accept the vector-effect attribute. When used, the CSS value overrides any values of the element's vector-effect attribute."
    },
    "font-variant-caps": {
      "values": [
        "normal",
        "small-caps",
        "all-small-caps",
        "petite-caps",
        "all-petite-caps",
        "unicase",
        "titling-caps",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-caps CSS property controls the use of alternate glyphs used for small or petite capitals or for titling."
    },
    "font-optical-sizing": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-optical-sizing CSS property sets whether text rendering is optimized for viewing at different sizes."
    },
    "break-before": {
      "values": [
        "auto",
        "avoid",
        "always",
        "all",
        "avoid-page",
        "page",
        "left",
        "right",
        "recto",
        "verso",
        "avoid-column",
        "column",
        "avoid-region",
        "region",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The break-before CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored."
    },
    "border-inline-start-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "alignment-baseline": {
      "values": [
        "baseline",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "text-top",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The alignment-baseline CSS property specifies the specific baseline used to align the box's text and inline-level contents. Baseline alignment is the relationship among the baselines of multiple alignment subjects within an alignment context. When performing baseline alignment, the alignment-baseline property value specifies which baseline of the box is aligned to the corresponding baseline of its alignment context."
    },
    "text-orientation": {
      "values": [
        "mixed",
        "upright",
        "sideways",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-orientation CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when writing-mode is not horizontal-tb). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers."
    },
    "font-variant-east-asian": {
      "values": [
        "normal",
        "jis78",
        "jis83",
        "jis90",
        "jis04",
        "simplified",
        "traditional",
        "full-width",
        "proportional-width",
        "ruby",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-east-asian CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese."
    },
    "border-inline-end-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "paint-order": {
      "values": [
        "normal",
        "fill",
        "stroke",
        "markers",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The paint-order CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn."
    },
    "border-image-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-image-outset CSS property sets the distance by which an element's border image is set out from its border box."
    },
    "animation-timeline": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-timeline CSS property specifies the timeline that is used to control the progress of a CSS animation."
    },
    "view-transition-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The view-transition-name CSS property provides the selected element with a distinct identifying name (a custom-ident) and causes it to participate in a separate view transition from the root view transition — or no view transition if the none value is specified."
    },
    "grid": {
      "values": [
        "none",
        "subgrid",
        "auto-flow",
        "dense",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The grid CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration."
    },
    "d": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The d CSS property defines a path to be drawn by the SVG path element. If present, it overrides the element's d attribute."
    },
    "rx": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The rx CSS property defines the x-axis, or horizontal, radius of an SVG ellipse and the horizontal curve of the corners of an SVG rect rectangle. If present, it overrides the shape's rx attribute."
    },
    "baseline-shift": {
      "values": [
        "sub",
        "super",
        "top",
        "center",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The baseline-shift attribute allows repositioning of the dominant-baseline relative to the dominant-baseline of the parent text content element. The shifted object might be a sub- or superscript."
    },
    "text-spacing-trim": {
      "values": [
        "space-all",
        "normal",
        "space-first",
        "trim-start",
        "trim-both",
        "trim-all",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-spacing-trim CSS property controls the internal spacing set on Chinese/Japanese/Korean (CJK) punctuation characters between adjacent characters (kerning) and at the start or end of text lines."
    },
    "flood-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flood-color CSS property defines the color of the current filter primitive subregion in feFlood and feDropShadow elements within a filter. If present, it overrides the element's flood-color attribute."
    },
    "column-rule-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The column-rule-width CSS property sets the width of the line drawn between columns in a multi-column layout."
    },
    "scroll-padding-bottom": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "shape-margin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-margin CSS property sets a margin for a CSS shape created using shape-outside."
    },
    "shape-image-threshold": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-image-threshold CSS property sets the alpha channel threshold used to extract the shape using an image as the value for shape-outside."
    },
    "counter-set": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The counter-set CSS property sets CSS counters on the element to the given values."
    },
    "offset-distance": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset-distance CSS property specifies a position along an offset-path for an element to be placed."
    },
    "offset-path": {
      "values": [
        "none",
        "view-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset-path CSS property specifies a path for an element to follow and determines the element's positioning within the path's parent container or the SVG coordinate system. The path is a line, a curve, or a geometrical shape along which the element gets positioned or moves."
    },
    "offset-rotate": {
      "values": [
        "auto",
        "reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset-rotate CSS property defines the orientation/direction of the element as it is positioned along the offset-path."
    },
    "border-inline": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet."
    },
    "animation-composition": {
      "values": [
        "replace",
        "add",
        "accumulate",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-composition CSS property specifies the Glossary(composite operation) to use when multiple animations affect the same property simultaneously."
    },
    "text-emphasis-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-emphasis-color CSS property sets the color of emphasis marks. This value can also be set using the text-emphasis shorthand."
    },
    "ry": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The ry CSS property defines the y-axis, or vertical, radius of an SVG ellipse and the vertical curve of the corners of an SVG rect rectangle. If present, it overrides the shape's ry attribute."
    },
    "font-variant-alternates": {
      "values": [
        "normal",
        "stylistic()",
        "historical-forms",
        "styleset(",
        "character-variant(",
        "swash()",
        "ornaments()",
        "annotation()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-alternates CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in @font-feature-values."
    },
    "border-inline-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "text-emphasis": {
      "values": [
        "none",
        "filled",
        "open",
        "dot",
        "circle",
        "double-circle",
        "triangle",
        "sesame",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-emphasis CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for text-emphasis-style and text-emphasis-color."
    },
    "border-block-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "white-space-collapse": {
      "values": [
        "collapse",
        "discard",
        "preserve",
        "preserve-breaks",
        "preserve-spaces",
        "break-spaces",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The white-space-collapse CSS property controls how Glossary(whitespace, white space) inside an element is collapsed."
    },
    "text-combine-upright": {
      "values": [
        "none",
        "all",
        "digits",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-combine-upright CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes."
    },
    "page": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The page CSS property is used to specify the named page, a specific type of page defined by the @page at-rule."
    },
    "color-interpolation-filters": {
      "values": [
        "auto",
        "sRGB",
        "linearRGB",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The color-interpolation-filters CSS property specifies the color space for imaging operations performed via SVG filter effects. If explicitly declared, the value of the CSS property overrides any value given in the element's color-interpolation-filters attribute."
    },
    "offset": {
      "values": [
        "normal",
        "auto",
        "none",
        "reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset CSS shorthand property sets all the properties required for animating an element along a defined path. The offset properties together help to define an offset transform, a transform that aligns a point in an element (offset-anchor to an offset position (offset-position on a path (offset-path at various points along the path (offset-distance and optionally rotates the element (offset-rotate to follow the direction of the path."
    },
    "font-variant-position": {
      "values": [
        "normal",
        "sub",
        "super",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-position CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript."
    },
    "mask-origin": {
      "values": [
        "view-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-origin CSS property sets the origin of a mask."
    },
    "border-block-style": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "lighting-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The lighting-color CSS property defines the color of the light source for the feDiffuseLighting and feSpecularLighting SVG lighting filter primitives within an SVG filter. If present, it overrides the element's lighting-color attribute."
    },
    "hyphenate-character": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The hyphenate-character CSS property sets the character (or string) used at the end of a line before a hyphenation break."
    },
    "mask-clip": {
      "values": [
        "view-box",
        "no-clip",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-clip CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area."
    },
    "text-emphasis-position": {
      "values": [
        "over",
        "under",
        "right",
        "left",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-emphasis-position CSS property sets where emphasis marks are drawn. Similar to the text rendered by the [<ruby>](/en-US/docs/Web/HTML/Element/ruby) HTML element, if there isn't enough room for emphasis marks, the line height is increased."
    },
    "scroll-padding-right": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "ruby-position": {
      "values": [
        "alternate",
        "over",
        "under",
        "inter-character",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The ruby-position CSS property defines the position of a ruby element relative to its base element. It can be positioned over the element (over), under it (under), or between the characters on their right side (inter-character)."
    },
    "marker-end": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The marker-end CSS property points to a marker that will be drawn on the last vertex of the element's path; that is, at its ending vertex. The marker must have been defined using an SVG SVGElement('marker') element, and can only be referenced with a cssxref(urlvalue, &lt;url&gt;) value. The value of the CSS property overrides any values of the marker-end attribute in the SVG."
    },
    "color-interpolation": {
      "values": [
        "auto",
        "sRGB",
        "linearRGB",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The color-interpolation CSS property is used in SVG to specify which color space to use for linearGradient and radialGradient SVG elements."
    },
    "marker-start": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The marker-start CSS property points to a marker that will be drawn on the first vertex of the element's path; that is, at its starting vertex. The marker must have been defined using an SVG SVGElement('marker') element, and can only be referenced with a cssxref(urlvalue, &lt;url&gt;) value. The value of the CSS property overrides any values of the marker-start attribute in the SVG."
    },
    "marker-mid": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The marker-mid CSS property points to a marker that will be drawn on the middle vertices of the element's path; that is, at each of its vertices between the start and end vertices. The marker must have been defined using an SVG SVGElement('marker') element, and can only be referenced with a cssxref(urlvalue, &lt;url&gt;) value. The value of the CSS property overrides any values of the marker-mid attribute in the SVG."
    },
    "ruby-align": {
      "values": [
        "start",
        "center",
        "space-between",
        "space-around",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The ruby-align CSS property defines the distribution of the different ruby elements over the base."
    },
    "text-emphasis-style": {
      "values": [
        "none",
        "filled",
        "open",
        "dot",
        "circle",
        "double-circle",
        "triangle",
        "sesame",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-emphasis-style CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the text-emphasis shorthand."
    },
    "scroll-padding-block-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "view-timeline-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The view-timeline-name CSS property is used to define the name of a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
    },
    "transition-behavior": {
      "values": [
        "normal",
        "allow-discrete",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The transition-behavior CSS property specifies whether transitions will be started for properties whose animation behavior is discrete."
    },
    "animation-range": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-range CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end."
    },
    "view-timeline-axis": {
      "values": [
        "block",
        "inline",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The view-timeline-axis CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a named view progress timeline animation, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline-axis is set on the subject. See CSS scroll-driven animations for more details."
    },
    "scroll-padding-inline-start": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-inline-end": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "initial-letter": {
      "values": [
        "normal",
        "drop",
        "raise",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The initial-letter CSS property sets the size and sink for dropped, raised, and sunken initial letters. This property applies to ::first-letter pseudo-elements and inline-level first children of block containers."
    },
    "hyphenate-limit-chars": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The hyphenate-limit-chars CSS property specifies the minimum word length to allow hyphenation of words as well as the minimum number of characters before and after the hyphen."
    },
    "text-box-edge": {
      "values": [
        "auto",
        "text",
        "ideographic",
        "ideographic-ink",
        "cap",
        "ex",
        "alphabetic",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the metrics to use for 'text-box-trim' effects."
    },
    "font-synthesis-weight": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-synthesis-weight CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family."
    },
    "text-box-trim": {
      "values": [
        "none",
        "trim-start",
        "trim-end",
        "trim-both",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "On inline boxes, specifies whether to trim the content box to match the specified 'text-box-edge' metric. On block containers, as well as on each column of a multi-column container, specifies whether to trim half-leading at the start/end of the box's content to better match its content edge to its text content."
    },
    "border-inline-color": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "marker": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The marker CSS property points to a marker that will be drawn on the first, middle, and last vertices of the element's path; that is, at all of its vertices. The marker must have been defined using an SVG SVGElement('marker') element, and can only be referenced with a cssxref(urlvalue, &lt;url&gt;) value. The value of the CSS property overrides any values of the marker-start, marker, and marker-end attributes in the SVG."
    },
    "interpolate-size": {
      "values": [
        "numeric-only",
        "allow-keywords",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The interpolate-size CSS property allows you to enable animations and transitions between a [<length-percentage>](/en-US/docs/Web/CSS/length-percentage) value and an intrinsic size value such as auto, fit-content, or max-content."
    },
    "text-wrap-mode": {
      "values": [
        "wrap",
        "nowrap",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-wrap-mode CSS property controls whether the text inside an element is wrapped. The different values provide alternate ways of wrapping the content of a block element. It can also be set, and reset, using the text-wrap shorthand or the white-space shorthand."
    },
    "border-inline-style": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "anchor-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The anchor-name CSS property enables defining an element as an anchor element by giving it one or more identifying anchor names. Each name can then be set as the value of a positioned element's position-anchor property to associate it with the anchor."
    },
    "font-palette": {
      "values": [
        "normal",
        "light",
        "dark",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-palette CSS property allows specifying one of the many palettes contained in a color font that a user agent may use for the font. Users can also override the values in a palette or create a new palette by using the [@font-palette-values](/en-US/docs/Web/CSS/@font-palette-values) at-rule."
    },
    "position-anchor": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-anchor CSS property specifies the anchor name of the anchor element (i.e. an element that has an anchor name set on it via the anchor-name property) a positioned element is associated with."
    },
    "font-variant-emoji": {
      "values": [
        "normal",
        "text",
        "emoji",
        "unicode",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-variant-emoji CSS property specifies the default presentation style for displaying emojis."
    },
    "border-block-color": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "animation-range-start": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-range-start CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start."
    },
    "animation-range-end": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The animation-range-end CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end."
    },
    "overlay": {
      "values": [
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overlay CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal dialog element) is actually rendered in the top layer. This property is only relevant within a list of transition-property values, and only if allow-discrete is set as the transition-behavior."
    },
    "scroll-timeline": {
      "values": [
        "none",
        "block",
        "inline",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-timeline CSS shorthand property is used to define a named scroll progress timeline, which is progressed through by scrolling a scrollable element (scroller) between top and bottom (or left and right). scroll-timeline is set on the scroller that will provide the timeline. The starting scroll position represents 0% progress and the ending scroll position represents 100% progress. If the 0% position and 100% position coincide (i.e., the scroll container has no overflow to scroll), the timeline is inactive."
    },
    "view-transition-class": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The 'view-transition-class' can be used to apply the same style rule to multiple named view transition pseudo-elements."
    },
    "position-area": {
      "values": [
        "none",
        "left",
        "center",
        "right",
        "span-left",
        "span-right",
        "x-start",
        "x-end",
        "span-x-start",
        "span-x-end",
        "x-self-start",
        "x-self-end",
        "span-x-self-start",
        "span-x-self-end",
        "span-all",
        "top",
        "bottom",
        "span-top",
        "span-bottom",
        "y-start",
        "y-end",
        "span-y-start",
        "span-y-end",
        "y-self-start",
        "y-self-end",
        "span-y-self-start",
        "span-y-self-end",
        "block-start",
        "block-end",
        "span-block-start",
        "span-block-end",
        "inline-start",
        "inline-end",
        "span-inline-start",
        "span-inline-end",
        "self-block-start",
        "self-block-end",
        "span-self-block-start",
        "span-self-block-end",
        "self-inline-start",
        "self-inline-end",
        "span-self-inline-start",
        "span-self-inline-end",
        "start",
        "end",
        "span-start",
        "span-end",
        "self-start",
        "self-end",
        "span-self-start",
        "span-self-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-area CSS property enables an anchor-positioned element to be positioned relative to the edges of its associated anchor element by placing the positioned element on one or more tiles of an implicit 3x3 grid, where the anchoring element is the center cell."
    },
    "object-view-box": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The object-view-box property specifies a 'view box' over an element, which allows zooming or panning over the element’s contents."
    },
    "position-visibility": {
      "values": [
        "always",
        "anchors-valid",
        "anchors-visible",
        "no-overflow",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-visibility CSS property enables conditionally hiding an anchor-positioned element depending on, for example, whether it is overflowing its containing element or the viewport."
    },
    "math-style": {
      "values": [
        "normal",
        "compact",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The math-style property indicates whether MathML equations should render with normal or compact height."
    },
    "font-synthesis-style": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-synthesis-style CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family."
    },
    "baseline-source": {
      "values": [
        "auto",
        "first",
        "last",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "When an inline-level box has more than one possible source for baseline information (such as for a multi-line inline block or inline flex container) this property specifies whether the first baseline set or last baseline set is preferred for alignment, indicating the box’s baseline alignment preference."
    },
    "timeline-scope": {
      "values": [
        "none",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The timeline-scope CSS property modifies the scope of a named animation timeline."
    },
    "math-depth": {
      "values": [
        "auto-add",
        "add()",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The math-depth property describes a notion of depth for each element of a mathematical formula, with respect to the top-level container of that formula. This is used to scale the computed value of the font-size of elements when font-size: math is applied."
    },
    "position-try": {
      "values": [
        "normal",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-try CSS property is a shorthand that corresponds to the position-try-order and position-try-fallbacks properties."
    },
    "math-shift": {
      "values": [
        "normal",
        "compact",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The math-shift property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift."
    },
    "anchor-scope": {
      "values": [
        "none",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property scopes the specified anchor names, and lookups for these anchor names, to this element's subtree."
    },
    "text-wrap-style": {
      "values": [
        "auto",
        "balance",
        "stable",
        "pretty",
        "avoid-orphans",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-wrap-style CSS property controls how text inside an element is wrapped. The different values provide alternate ways of wrapping the content of a block element. It can also be set, and reset, using the text-wrap shorthand."
    },
    "view-timeline": {
      "values": [
        "none",
        "block",
        "inline",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The view-timeline CSS shorthand property is used to define a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
    },
    "position-try-order": {
      "values": [
        "normal",
        "most-width",
        "most-height",
        "most-block-size",
        "most-inline-size",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-try-order CSS property allows you to specify various fallback options that result in an available position-try fallback being used to set an anchor-positioned element's position, instead of its initial position settings."
    },
    "offset-anchor": {
      "values": [
        "auto",
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset-anchor CSS property specifies the point inside the box of an element traveling along an offset-path that is actually moving along the path."
    },
    "scroll-timeline-axis": {
      "values": [
        "block",
        "inline",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-timeline-axis CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a named scroll progress timeline animation, which is progressed through by scrolling a scrollable element (scroller) between top and bottom (or left and right). scroll-timeline is set on the scroller that will provide the timeline. See CSS scroll-driven animations for more details."
    },
    "scroll-timeline-name": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-timeline-name CSS property is used to define the name of a named scroll progress timeline, which is progressed through by scrolling a scrollable element (scroller) between top and bottom (or left and right). scroll-timeline-name is set on the scroller that will provide the timeline."
    },
    "position-try-fallbacks": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The position-try-fallbacks CSS property enables you to specify a list of one or more alternative position try fallback options for anchor-positioned elements to be placed relative to their associated anchor elements. When the element would otherwise overflow its inset-modified containing block, the browser will try placing the positioned element in these different fallback positions, in the order provided, until it finds a value that stops it from overflowing its container or the viewport."
    },
    "offset-position": {
      "values": [
        "normal",
        "auto",
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The offset-position CSS property defines the initial position of an element along a path. This property is typically used in combination with the offset-path property to create a motion effect. The value of offset-position determines where the element gets placed initially for moving along an offset path if an offset-path function such as cssxref(basic-shape/path, path()) does not specify its own starting position."
    },
    "view-timeline-inset": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The view-timeline-inset CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see glossary(Scroll container) for more details) in which the subject element of a named view progress timeline animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline."
    },
    "font-synthesis-small-caps": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-synthesis-small-caps CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
    },
    "text-box": {
      "values": [
        "normal",
        "none",
        "trim-start",
        "trim-end",
        "trim-both",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property is a shorthand for setting the 'text-box-trim' and 'text-box-edge' properties in a single declaration."
    },
    "line-clamp": {
      "values": [
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The line-clamp property is a shorthand for the max-lines, block-ellipsis, and continue properties."
    },
    "speak-as": {
      "values": [
        "normal",
        "spell-out",
        "digits",
        "literal-punctuation",
        "no-punctuation",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The speak-as property determines in what manner text gets rendered aurally, based upon a predefined list of possibilities."
    },
    "text-autospace": {
      "values": [
        "normal",
        "no-autospace",
        "ideograph-alpha",
        "ideograph-numeric",
        "punctuation",
        "insert",
        "replace",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Controls spacing between adjacent characters on the same line within the same inline formatting context."
    },
    "dynamic-range-limit": {
      "values": [
        "standard",
        "high",
        "constrained-high",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Controls highest luminance color."
    },
    "view-transition-group": {
      "values": [
        "normal",
        "contain",
        "nearest",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The 'view-transition-group' property can be used in conjuction with 'view-transition-name' to generate a hierarchy of named view transition pseudo-element."
    },
    "text-justify": {
      "values": [
        "auto",
        "none",
        "inter-word",
        "inter-character",
        "ruby",
        "no-compress",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The text-justify CSS property sets what type of justification should be applied to text when cssxref(text-align, text-align: justify;) is set on an element."
    },
    "caret-animation": {
      "values": [
        "auto",
        "manual",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "On most platforms and in most UAs, the text insertion caret blinks. This property allows the author to take control over the way the caret is animated."
    },
    "shape-inside": {
      "values": [
        "auto",
        "outside-shape",
        "shape-box",
        "display",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-inside property adds one or more exclusion areas to the element’s wrapping context."
    },
    "shape-padding": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-padding property adds padding to a shape-inside. This defines a new shape where every point is the specified distance from the shape-inside."
    },
    "glyph-orientation-vertical": {
      "values": [
        "auto",
        "0deg",
        "90deg",
        "90",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The glyph-orientation-vertical attribute affects the amount that the current text position advances as each glyph is rendered."
    },
    "image-orientation": {
      "values": [
        "from-image",
        "none",
        "flip",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The image-orientation CSS property specifies a layout-independent correction to the orientation of an image."
    },
    "image-resolution": {
      "values": [
        "from-image",
        "snap",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The image-resolution CSS property specifies the intrinsic resolution of all raster images used in or on the element. It affects content images such as replaced elements and generated content, and decorative images such as background-image images."
    },
    "overflow-inline": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-inline CSS property sets what shows when content overflows the inline start and end edges of a box. This may be nothing, a scroll bar, or the overflow content."
    },
    "overflow-block": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overflow-block CSS property sets what shows when content overflows the block start and block end edges of a box. This may be nothing, a scroll bar, or the overflow content."
    },
    "masonry-track-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Controls item placement in the grid axis of a masonry container."
    },
    "cue": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cue property is a shorthand for cue-before and cue-after."
    },
    "rest": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The rest property is a shorthand for rest-before and rest-after."
    },
    "pause": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The pause property is a shorthand property for pause-before and pause-after."
    },
    "caret": {
      "values": [
        "auto",
        "manual",
        "bar",
        "block",
        "underscore",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property is a shorthand for setting caret-color and caret-shape in one declaration."
    },
    "nav-up": {
      "values": [
        "auto",
        "current",
        "root",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "User agents for devices with directional navigation keys respond by navigating the focus according to four respective nav-* directional navigation properties (nav-up, nav-right, nav-down, nav-left)."
    },
    "corners": {
      "values": [
        "round",
        "angle",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The corners shorthand sets corner-shape and border-radius in the same declaration."
    },
    "masonry": {
      "values": [
        "none",
        "subgrid",
        "row",
        "column",
        "row-reverse",
        "column-reverse",
        "normal",
        "reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This value causes an element to generate a masonry container box that is block-level when placed in flow layout."
    },
    "row-rule": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Sets the corresponding width, style, and color properties as a set."
    },
    "gap-rule": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Shorthand to set corresponding column and row properties."
    },
    "box-snap": {
      "values": [
        "none",
        "block-start",
        "block-end",
        "center",
        "baseline",
        "last-baseline",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies how the block is snapped to the baseline grid."
    },
    "continue": {
      "values": [
        "auto",
        "discard",
        "-webkit-discard",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The continue property gives authors the ability to request that content that does not fit inside an element be fragmented, and provides alternatives for where the remaining content should continue."
    },
    "nav-down": {
      "values": [
        "auto",
        "current",
        "root",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "User agents for devices with directional navigation keys respond by navigating the focus according to four respective nav-* directional navigation properties (nav-up, nav-right, nav-down, nav-left)."
    },
    "nav-left": {
      "values": [
        "auto",
        "current",
        "root",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "User agents for devices with directional navigation keys respond by navigating the focus according to four respective nav-* directional navigation properties (nav-up, nav-right, nav-down, nav-left)."
    },
    "wrap-flow": {
      "values": [
        "auto",
        "both",
        "start",
        "end",
        "minimum",
        "maximum",
        "clear",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "An element becomes an exclusion when its wrap-flow property has a computed value other than auto."
    },
    "copy-into": {
      "values": [
        "none",
        "element",
        "content",
        "text",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The copy-into property contains one or more pairs, each consisting of a custom identifier followed by a content-level keyword describing how to construct the value of the named content fragment."
    },
    "line-grid": {
      "values": [
        "match-parent",
        "create",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies whether this box creates a new baseline grid for its descendants or uses the same baseline grid as its parent."
    },
    "line-snap": {
      "values": [
        "none",
        "baseline",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property applies to all the line boxes directly contained by the element, and, when not none, causes each line box to shift (usually downward, possibly by zero) until it snaps to the line grid specified by line-grid."
    },
    "max-lines": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "A property that forces a fragment to break after a specified number of lines."
    },
    "flow-into": {
      "values": [
        "none",
        "element",
        "content",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The ‘flow-into’ property can place an element or its contents into a named flow."
    },
    "flow-from": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The flow-from property makes a block container a region and associates it with a named flow."
    },
    "cue-after": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cue-after property specifies auditory icons to be played after the element."
    },
    "nav-right": {
      "values": [
        "auto",
        "current",
        "root",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "User agents for devices with directional navigation keys respond by navigating the focus according to four respective nav-* directional navigation properties (nav-up, nav-right, nav-down, nav-left)."
    },
    "fill-size": {
      "values": [
        "auto",
        "cover",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies the size of the fill images. Values are interpreted identically to background-size, mutatis mutandi."
    },
    "string-set": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The string-set property contains one or more pairs, each consisting of an custom identifier (the name of the named string) followed by a content-list describing how to construct the value of the named string."
    },
    "font-width": {
      "values": [
        "normal",
        "ultra-condensed",
        "extra-condensed",
        "condensed",
        "semi-condensed",
        "semi-expanded",
        "expanded",
        "extra-expanded",
        "ultra-expanded",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The 'font-width' property selects a normal, condensed, or expanded face from a font family."
    },
    "block-step": {
      "values": [
        "none",
        "margin-box",
        "padding-box",
        "content-box",
        "auto",
        "center",
        "start",
        "end",
        "up",
        "down",
        "nearest",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This shorthand property allows for setting block-step-size, block-step-insert, block-step-align, and block-step-round in one declaration."
    },
    "ruby-merge": {
      "values": [
        "separate",
        "merge",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be merged and rendered as a group, or the separation should be determined based on the space available."
    },
    "rest-after": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The rest-after property specifies a prosodic boundary (silence with a specific duration) that occurs after the speech synthesis rendition of an element."
    },
    "cue-before": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The cue-before property specifies auditory icons to be played before the element."
    },
    "voice-rate": {
      "values": [
        "normal",
        "x-slow",
        "slow",
        "medium",
        "fast",
        "x-fast",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-rate property manipulates the rate of generated synthetic speech in terms of words per minute."
    },
    "wrap-after": {
      "values": [
        "auto",
        "avoid",
        "avoid-line",
        "avoid-flex",
        "line",
        "flex",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The wrap-after property specifies modifications to break opportunities in line breaking."
    },
    "fill-break": {
      "values": [
        "bounding-box",
        "slice",
        "clone",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies how the geometry of a fragmented box is treated for fills."
    },
    "fill-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property sets the fill color of an element. This color is drawn behind any fill images."
    },
    "fill-image": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property sets the fill images of an element. Images are drawn with the first specified one on top (closest to the user) and each subsequent image behind the previous one."
    },
    "border-clip": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Shorthand for border-clip-top, border-clip-right, border-clip-bottom, and border-clip-left."
    },
    "margin-trim": {
      "values": [
        "none",
        "block",
        "inline",
        "block-start",
        "inline-start",
        "block-end",
        "inline-end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container's edges."
    },
    "marker-side": {
      "values": [
        "match-self",
        "match-parent",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The marker-side property specifies whether an outside marker box is positioned based on the directionality of the list item itself (i.e. its originating element) or the directionality of the list container (i.e. the originating element’s parent)."
    },
    "mask-border": {
      "values": [
        "none",
        "fill",
        "auto",
        "stretch",
        "repeat",
        "round",
        "space",
        "luminance",
        "alpha",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border CSS shorthand property lets you create a mask along the edge of an element's border."
    },
    "float-defer": {
      "values": [
        "last",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether the initial float reference of a page float is the fragmentation container in which the float anchor is placed after previous page floats have been placed, or in another one."
    },
    "pause-after": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The pause-after property specifies a prosodic boundary (silence with a specific duration) that occurs after the speech synthesis rendition of the element."
    },
    "rest-before": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The rest-before property specifies a prosodic boundary (silence with a specific duration) that occurs before the speech synthesis rendition of an element."
    },
    "voice-pitch": {
      "values": [
        "absolute",
        "x-low",
        "low",
        "medium",
        "high",
        "x-high",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-pitch property specifies the 'baseline' pitch of the generated speech output, which depends on the user 'voice-family' instance, and varies across speech synthesis processors."
    },
    "voice-range": {
      "values": [
        "absolute",
        "x-low",
        "low",
        "medium",
        "high",
        "x-high",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-range property specifies the variability in the 'baseline' pitch."
    },
    "wrap-inside": {
      "values": [
        "auto",
        "avoid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies the line breaking behavior within a box. As determed by the line-breaking rules in effect."
    },
    "wrap-before": {
      "values": [
        "auto",
        "avoid",
        "avoid-line",
        "avoid-flex",
        "line",
        "flex",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The wrap-before property specifies modifications to break opportunities in line breaking."
    },
    "caret-shape": {
      "values": [
        "auto",
        "bar",
        "block",
        "underscore",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property allows authors to specify the desired shape of the text insertion caret."
    },
    "fill-origin": {
      "values": [
        "match-parent",
        "fill-box",
        "stroke-box",
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the coordinate system of the fill, setting the fill positioning area."
    },
    "fill-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies how fill images are tiled after they have been sized and positioned."
    },
    "stroke-size": {
      "values": [
        "auto",
        "cover",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies the size of the stroke images."
    },
    "-webkit-flex": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex."
    },
    "-webkit-mask": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask."
    },
    "corner-shape": {
      "values": [
        "round",
        "angle",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The corner-shape property specifies a reinterpretation of the radii to define other corner shapes."
    },
    "border-limit": {
      "values": [
        "all",
        "sides",
        "corners",
        "top",
        "right",
        "bottom",
        "left",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies which part of the border is rendered."
    },
    "margin-break": {
      "values": [
        "auto",
        "keep",
        "discard",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Controls whether the box’s block-axis margins are discarded or kept at a fragmentation break."
    },
    "color-adjust": {
      "values": [
        "economy",
        "exact",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The color-adjust shorthand allows an author to set all of the performance-motivated color adjustment properties in one declaration."
    },
    "reading-flow": {
      "values": [
        "normal",
        "flex-visual",
        "flex-flow",
        "grid-rows",
        "grid-columns",
        "grid-order",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Controls the order in which elements in a flex or grid layout are rendered to speech or are navigated to when using (linear) sequential navigation methods."
    },
    "wrap-through": {
      "values": [
        "wrap",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Setting the wrap-through property to none prevents an element from inheriting its parent wrapping context."
    },
    "masonry-fill": {
      "values": [
        "normal",
        "reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "masonry-flow": {
      "values": [
        "row",
        "column",
        "row-reverse",
        "column-reverse",
        "normal",
        "reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "float-offset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property pushes a page float in direction opposite of the where it has been floated with float."
    },
    "voice-volume": {
      "values": [
        "silent",
        "x-soft",
        "soft",
        "medium",
        "loud",
        "x-loud",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-volume property allows authors to control the amplitude of the audio waveform generated by the speech synthesizer, and is also used to adjust the relative volume level of audio cues within the aural box model of the selected element."
    },
    "pause-before": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The pause-before property specifies a prosodic boundary (silence with a specific duration) that occurs before the speech synthesis rendition of the element."
    },
    "voice-family": {
      "values": [
        "preserve",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-family property specifies a prioritized list of component values that are separated by commas to indicate that they are alternatives."
    },
    "voice-stress": {
      "values": [
        "normal",
        "strong",
        "moderate",
        "none",
        "reduced",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-stress property manipulates the strength of emphasis, which is normally applied using a combination of pitch change, timing changes, loudness and other acoustic differences."
    },
    "line-padding": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Adjusts spacing only at the start/end of a line."
    },
    "text-spacing": {
      "values": [
        "none",
        "auto",
        "space-all",
        "normal",
        "space-first",
        "trim-start",
        "trim-both",
        "trim-all",
        "no-autospace",
        "ideograph-alpha",
        "ideograph-numeric",
        "punctuation",
        "insert",
        "replace",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property is a shorthand for setting text-spacing-trim and text-autospace in a single declaration."
    },
    "field-sizing": {
      "values": [
        "fixed",
        "content",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The field-sizing CSS property enables you to control the sizing behavior of elements that are given a default preferred size, such as form control elements. This property enables you to override the default sizing behavior, allowing form controls to adjust in size to fit their contents."
    },
    "stroke-align": {
      "values": [
        "center",
        "inset",
        "outset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property allows the author to align a stroke along the outline."
    },
    "stroke-break": {
      "values": [
        "bounding-box",
        "slice",
        "clone",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies how the geometry of a fragmented box is treated for strokes."
    },
    "stroke-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property sets the stroke colors of an element."
    },
    "stroke-image": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property sets the stroke images of an element."
    },
    "-webkit-order": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of order."
    },
    "masonry-slack": {
      "values": [
        "infinite",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "masonry-track": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "line-fit-edge": {
      "values": [
        "leading",
        "text",
        "ideographic",
        "ideographic-ink",
        "cap",
        "ex",
        "alphabetic",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "inline-sizing": {
      "values": [
        "normal",
        "stretch",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies how the logical height of the content area of an inline box is measured in relation to its contents."
    },
    "ruby-overhang": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The ruby-overhang property controls whether ruby annotations may overlap adjacent text outside the ruby container."
    },
    "scroll-margin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin shorthand property sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element."
    },
    "voice-balance": {
      "values": [
        "left",
        "center",
        "right",
        "leftwards",
        "rightwards",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-balance property controls the spatial distribution of audio output across a lateral sound stage: one extremity is on the left, the other extremity is on the right hand side, relative to the listener’s position."
    },
    "fill-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "If fill images have been specified, this property specifies their initial position (after any resizing) within their corresponding fill positioning area."
    },
    "stroke-origin": {
      "values": [
        "match-parent",
        "fill-box",
        "stroke-box",
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the coordinate system of the stroke, setting the stroke positioning area."
    },
    "stroke-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Specifies how stroke fill images are tiled after they have been sized and positioned."
    },
    "-webkit-filter": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of filter."
    },
    "background-tbd": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "bookmark-level": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The bookmark-level property determines if a bookmark is created, and at what level."
    },
    "bookmark-label": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Sets the text content of the bookmark label."
    },
    "bookmark-state": {
      "values": [
        "open",
        "closed",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The bookmark-state may be open or closed."
    },
    "row-rule-break": {
      "values": [
        "intersection",
        "spanning-item",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-break": {
      "values": [
        "intersection",
        "spanning-item",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "row-rule-color": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "row-rule-style": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "row-rule-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-color": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-style": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "block-ellipsis": {
      "values": [
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property allows inserting content into the last line box before a (forced or unforced) region break to indicate the continuity of truncated/interrupted content."
    },
    "voice-duration": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The voice-duration property specifies how long it should take to render the selected element's content."
    },
    "text-align-all": {
      "values": [
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This longhand of the text-align shorthand property specifies the inline alignment of all lines of inline content in the block container, except for last lines overridden by a non-auto value of text-align-last."
    },
    "input-security": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "For the purpose of this specification, a sensitive text input is a text input whose purpose is to accept sensitive input, as defined by the host language."
    },
    "shape-subtract": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The shape-subtract property allows one to exclude part of the content area from the wrapping area. The excluded area is the addition of all the areas defined in a list of CSS basic shapes and/or SVG shapes."
    },
    "border-clip-top": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Splits the top border into parts along the border edge."
    },
    "box-shadow-blur": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "row-rule-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "footnote-policy": {
      "values": [
        "auto",
        "line",
        "block",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The footnote-policy property allows authors some influence over the rendering of difficult pages."
    },
    "link-parameters": {
      "values": [
        "none",
        "param(",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The link-parameters property is one way to set link parameters on the element itself, and on all external CSS resources specified on the element."
    },
    "float-reference": {
      "values": [
        "inline",
        "column",
        "region",
        "page",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The floats are aligning to the start or end of a float reference, specified by the float-reference attribute."
    },
    "region-fragment": {
      "values": [
        "auto",
        "break",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The region-fragment property controls the behavior of the last usable region associated with a named flow."
    },
    "block-step-size": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property defines the step unit for a block-level box’s block size."
    },
    "border-boundary": {
      "values": [
        "none",
        "parent",
        "display",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "When the border-boundary property on an element is set to 'parent', additional borders of the element could be drawn where the element’s area and the borders of its parent are met."
    },
    "stroke-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "If stroke images have been specified, this property specifies their initial position (after any resizing) within their corresponding stroke positioning area."
    },
    "-webkit-box-flex": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor prefixed property mapping to flex-grow."
    },
    "-webkit-box-pack": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor prefixed property mapping to justify-content."
    },
    "border-clip-left": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Splits the left border into parts along the border edge."
    },
    "box-shadow-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "footnote-display": {
      "values": [
        "block",
        "inline",
        "compact",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The footnote-display property determines whether a footnote is displayed as a block element or inline element."
    },
    "mask-border-mode": {
      "values": [
        "luminance",
        "alpha",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-mode CSS property specifies the blending mode used in a mask border."
    },
    "block-step-align": {
      "values": [
        "auto",
        "center",
        "start",
        "end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether extra spacing derived from applying block-step-size is inserted before, inserted after, or split between both sides of the box."
    },
    "block-step-round": {
      "values": [
        "up",
        "down",
        "nearest",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether adjustments due to block-step-size insert positive or negative space."
    },
    "line-height-step": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The line-height-step CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit."
    },
    "white-space-trim": {
      "values": [
        "none",
        "discard-before",
        "discard-after",
        "discard-inner",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "text-group-align": {
      "values": [
        "none",
        "start",
        "end",
        "left",
        "right",
        "center",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property aligns the contents of the line boxes as a group while maintaining their text alignment."
    },
    "stroke-alignment": {
      "values": [
        "center",
        "inner",
        "outer",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property allows the author to align a stroke along the outline of the current object."
    },
    "-webkit-animation": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation."
    },
    "-webkit-flex-flow": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-flow."
    },
    "-webkit-flex-grow": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-grow."
    },
    "-webkit-flex-wrap": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-wrap."
    },
    "-webkit-mask-clip": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-clip."
    },
    "-webkit-mask-size": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-size."
    },
    "-webkit-transform": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transform."
    },
    "-webkit-box-align": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor prefixed property mapping to align-items."
    },
    "border-top-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "border-clip-right": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Splits the right border into parts along the border edge."
    },
    "box-shadow-offset": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "box-shadow-spread": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "column-rule-break": {
      "values": [
        "intersection",
        "spanning-item",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "masonry-direction": {
      "values": [
        "row",
        "column",
        "row-reverse",
        "column-reverse",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "mask-border-slice": {
      "values": [
        "fill",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-slice CSS property divides the image set by mask-border-source into regions. These regions are used to form the components of an element's mask border."
    },
    "mask-border-width": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-width CSS property sets the width of an element's mask border."
    },
    "block-step-insert": {
      "values": [
        "margin-box",
        "padding-box",
        "content-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether extra spacing derived from applying block-step-size is inserted inside (like padding) or outside (like margin) the box’s border."
    },
    "scroll-margin-top": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "stroke-dashcorner": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dashcorner property controls whether a dash is always painted at the vertices of a stroked shape."
    },
    "stroke-dashadjust": {
      "values": [
        "none",
        "stretch",
        "compress",
        "dashes",
        "gaps",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dashadjust property specifies whether and how a stroke's dash pattern will be adjusted so that it is repeated a whole number of times along an element's subpaths."
    },
    "-webkit-align-self": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of align-self."
    },
    "-webkit-box-shadow": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of box-shadow."
    },
    "-webkit-box-sizing": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of box-sizing."
    },
    "-webkit-flex-basis": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-basis."
    },
    "-webkit-mask-image": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-image."
    },
    "-webkit-transition": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transition."
    },
    "-webkit-box-orient": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor prefixed property mapping to flex-direction."
    },
    "border-left-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "border-clip-bottom": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Splits the bottom border into parts along the border edge."
    },
    "print-color-adjust": {
      "values": [
        "economy",
        "exact",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The print-color-adjust CSS property sets what, if anything, the Glossary(user agent) may do to optimize the appearance of the element on the output device."
    },
    "column-rule-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "mask-border-source": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-source CSS property sets the source image used to create an element's mask border."
    },
    "mask-border-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box."
    },
    "mask-border-repeat": {
      "values": [
        "stretch",
        "repeat",
        "round",
        "space",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The mask-border-repeat CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border."
    },
    "-webkit-line-clamp": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-line-clamp CSS property allows limiting of the contents of a block to the specified number of lines."
    },
    "scroll-margin-left": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "text-emphasis-skip": {
      "values": [
        "spaces",
        "punctuation",
        "symbols",
        "narrow",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property describes for which characters marks are drawn."
    },
    "-webkit-appearance": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Name Alias of appearance."
    },
    "stroke-dash-corner": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dash-corner property controls whether a dash is always painted at the vertices of a stroked shape."
    },
    "-webkit-text-stroke": {
      "values": [
        "thin",
        "medium",
        "thick",
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-text-stroke CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties -webkit-text-stroke-width and -webkit-text-stroke-color."
    },
    "-webkit-align-items": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of align-items."
    },
    "-webkit-flex-shrink": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-shrink."
    },
    "-webkit-mask-origin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-origin."
    },
    "-webkit-mask-repeat": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-repeat."
    },
    "-webkit-perspective": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of perspective."
    },
    "background-repeat-x": {
      "values": [
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "background-repeat-y": {
      "values": [
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "border-right-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "box-shadow-position": {
      "values": [
        "outset",
        "inset",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "masonry-auto-tracks": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "masonry-track-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "initial-letter-wrap": {
      "values": [
        "none",
        "first",
        "all",
        "grid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether lines impacted by an initial letter are shortened to fit the rectangular shape of the initial letter box or the contour of its glyph outline."
    },
    "scroll-marker-group": {
      "values": [
        "none",
        "before",
        "after",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "overscroll-behavior": {
      "values": [
        "contain",
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overscroll-behavior CSS property sets what a browser does when reaching the boundary of a scrolling area."
    },
    "scroll-margin-right": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-block": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-block shorthand property sets the scroll margins of an element in the block dimension."
    },
    "hanging-punctuation": {
      "values": [
        "none",
        "first",
        "force-end",
        "allow-end",
        "last",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box."
    },
    "-webkit-user-select": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Alias shorthand property of user-select."
    },
    "stroke-dash-justify": {
      "values": [
        "none",
        "stretch",
        "compress",
        "dashes",
        "gaps",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The stroke-dash-justify property specifies whether and how a stroke's dash pattern will be adjusted so that it is repeated a whole number of times along each of an element's subpaths."
    },
    "border-bottom-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "gap-rule-paint-order": {
      "values": [
        "row-over-column",
        "column-over-row",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "initial-letter-align": {
      "values": [
        "border-box",
        "alphabetic",
        "ideographic",
        "hanging",
        "leading",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "scroll-margin-bottom": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-inline": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-inline shorthand property sets the scroll margins of an element in the inline dimension."
    },
    "min-intrinsic-sizing": {
      "values": [
        "legacy",
        "zero-if-scroll",
        "zero-if-extrinsic",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property defines whether the min-content contribution of a non-replaced box is “compressed” under certain circumstances."
    },
    "word-space-transform": {
      "values": [
        "none",
        "space",
        "ideographic-space",
        "auto-phrase",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "hyphenate-limit-zone": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line."
    },
    "hyphenate-limit-last": {
      "values": [
        "none",
        "always",
        "column",
        "page",
        "spread",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property indicates hyphenation behavior at the end of elements, column, pages, and spreads."
    },
    "text-decoration-trim": {
      "values": [
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property adjusts the start and end points of line decorations, allowing the author to shorten, lengthen, or shift the decoration with respect to the text."
    },
    "-webkit-align-content": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of align-content."
    },
    "-webkit-border-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of border-radius."
    },
    "-webkit-mask-position": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-position."
    },
    "overscroll-behavior-x": {
      "values": [
        "contain",
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overscroll-behavior-x CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached."
    },
    "overscroll-behavior-y": {
      "values": [
        "contain",
        "none",
        "auto",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The overscroll-behavior-y CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached."
    },
    "scroll-initial-target": {
      "values": [
        "none",
        "nearest",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "hyphenate-limit-lines": {
      "values": [
        "no-limit",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property indicates the maximum number of successive hyphenated lines in an element. The no-limit value means that there is no limit."
    },
    "-webkit-animation-name": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-name."
    },
    "-webkit-flex-direction": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of flex-direction."
    },
    "-webkit-mask-box-image": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "  Non-standardheader() "
    },
    "-webkit-mask-composite": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the CSSxRef(mask-image, -webkit-mask-image) property."
    },
    "font-language-override": {
      "values": [
        "normal",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-language-override CSS property controls the use of language-specific glyphs in a typeface."
    },
    "masonry-template-areas": {
      "values": [
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "contain-intrinsic-size": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain-intrinsic-size CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment."
    },
    "-webkit-text-fill-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-text-fill-color CSS property specifies the fill color of characters of text. If this property is not set, the value of the color property is used."
    },
    "-webkit-animation-delay": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-delay."
    },
    "-webkit-background-clip": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of background-clip."
    },
    "-webkit-background-size": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Improper implementation of a legacy alias for background-size."
    },
    "-webkit-justify-content": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of justify-content."
    },
    "-webkit-transform-style": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transform-style."
    },
    "background-repeat-block": {
      "values": [
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "border-block-end-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "font-synthesis-position": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The font-synthesis-position CSS property lets you specify whether or not a browser may synthesize the subscript and superscript position typefaces when they are missing in a font family, while using font-variant-position to set the positions."
    },
    "masonry-template-tracks": {
      "values": [
        "none",
        "subgrid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "scroll-margin-block-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "contain-intrinsic-width": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain-intrinsic-width CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment."
    },
    "-webkit-transform-origin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transform-origin."
    },
    "-webkit-transition-delay": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transition-delay."
    },
    "-webkit-text-size-adjust": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor Prefixed Legacy Name Alias. (-vendorPrefix-)text-size-adjust"
    },
    "background-repeat-inline": {
      "values": [
        "repeat",
        "space",
        "round",
        "no-repeat",
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "border-inline-end-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "overflow-clip-margin-top": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "scroll-margin-inline-end": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "contain-intrinsic-height": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain-intrinsic-height CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment."
    },
    "text-decoration-skip-box": {
      "values": [
        "none",
        "all",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies what parts of the element’s box area any text decoration affecting the element must skip over."
    },
    "-webkit-text-stroke-color": {
      "values": [
        "currentColor",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-text-stroke-color CSS property specifies the stroke color of characters of text. If this property is not set, the value of the color property is used."
    },
    "-webkit-text-stroke-width": {
      "values": [
        "thin",
        "medium",
        "thick",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The -webkit-text-stroke-width CSS property specifies the width of the stroke for text."
    },
    "-webkit-background-origin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of background-origin."
    },
    "-webkit-box-ordinal-group": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Vendor prefixed property mapping to order."
    },
    "background-position-block": {
      "values": [
        "center",
        "start",
        "end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the background position's block-axis component."
    },
    "border-block-start-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "spatial-navigation-action": {
      "values": [
        "auto",
        "focus",
        "scroll",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "When the focus is inside of a scroll container and the user triggers spatial navigation, it is somewhat ambiguous whether they are requesting that the focus be moved in that direction, or whether the document should be scrolled in that direction."
    },
    "overflow-clip-margin-left": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "scroll-margin-block-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "text-decoration-skip-self": {
      "values": [
        "auto",
        "skip-all",
        "skip-underline",
        "skip-overline",
        "skip-line-through",
        "no-skip",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether any text decoration lines drawn by its ancestors are propagated to or drawn across the element."
    },
    "-webkit-animation-duration": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-duration."
    },
    "-webkit-perspective-origin": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of perspective-origin."
    },
    "background-position-inline": {
      "values": [
        "center",
        "start",
        "end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies the background position's inline-axis component."
    },
    "border-inline-start-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": ""
    },
    "spatial-navigation-contain": {
      "values": [
        "auto",
        "contain",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Creates an additional spatial navigation container."
    },
    "overflow-clip-margin-right": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "overflow-clip-margin-block": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "scroll-margin-inline-start": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "-webkit-animation-direction": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-direction."
    },
    "-webkit-animation-fill-mode": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-fill-mode."
    },
    "-webkit-backface-visibility": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of backface-visibility."
    },
    "-webkit-transition-duration": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transition-duration."
    },
    "-webkit-transition-property": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transition-property."
    },
    "spatial-navigation-function": {
      "values": [
        "normal",
        "grid",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The default algorithm of spatial navigation specified in the § 8 Processing Model may need the fine tune depending on the layout types."
    },
    "overflow-clip-margin-bottom": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "overflow-clip-margin-inline": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "text-decoration-skip-spaces": {
      "values": [
        "none",
        "all",
        "start",
        "end",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "This property specifies whether text decoration skips any spaces."
    },
    "-webkit-animation-play-state": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-play-state."
    },
    "-webkit-mask-box-image-slice": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-border-slice."
    },
    "-webkit-mask-box-image-width": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-border-width."
    },
    "contain-intrinsic-block-size": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain-intrinsic-block-size CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment."
    },
    "-webkit-mask-box-image-outset": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-border-outset."
    },
    "-webkit-mask-box-image-repeat": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-border-repeat."
    },
    "-webkit-mask-box-image-source": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of mask-border-source."
    },
    "contain-intrinsic-inline-size": {
      "values": [
        "auto",
        "none",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "The contain-intrinsic-inline-size CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment."
    },
    "-webkit-border-top-left-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of border-top-left-radius."
    },
    "overflow-clip-margin-block-end": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "-webkit-border-top-right-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of border-top-right-radius."
    },
    "overflow-clip-margin-inline-end": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "overflow-clip-margin-block-start": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "-webkit-animation-timing-function": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-timing-function."
    },
    "-webkit-animation-iteration-count": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of animation-iteration-count."
    },
    "-webkit-border-bottom-left-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of border-bottom-left-radius."
    },
    "overflow-clip-margin-inline-start": {
      "values": [
        "content-box",
        "padding-box",
        "border-box",
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Defines the overflow clip edge of a box."
    },
    "-webkit-border-bottom-right-radius": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of border-bottom-right-radius."
    },
    "-webkit-transition-timing-function": {
      "values": [
        "inherit",
        "initial",
        "unset"
      ],
      "description": "Legacy Alias of transition-timing-function."
    }
  },
  "pseudoSelectors": {
    ":is()": {
      "description": "The matches-any pseudo-class, :is(), is a functional pseudo-class taking a <forgiving-selector-list> as its sole argument."
    },
    ":matches()": {
      "description": "As previous drafts of this specification used the name :matches() for this pseudo-class, UAs may additionally implement this obsolete name as a legacy selector alias for :is() if needed for backwards-compatibility."
    },
    ":not()": {
      "description": "The negation pseudo-class, :not(), is a functional pseudo-class taking a <complex-real-selector-list> as an argument. It represents an element that is not represented by its argument."
    },
    ":where()": {
      "description": "The Specificity-adjustment pseudo-class, :where(), is a functional pseudo-class with the same syntax and functionality as :is(). Unlike :is(), neither the :where() pseudo-class, nor any of its arguments, contribute to the specificity of the selector—​its specificity is always zero."
    },
    ":has()": {
      "description": "The relational pseudo-class, :has(), is a functional pseudo-class taking a <relative-selector-list> as an argument. It represents an element if any of the relative selectors would match at least one element when anchored against this element."
    },
    ":defined": {
      "description": "In some host languages, elements can have a distinction between being “defined”/“constructed” or not. The :defined pseudo-class matches elements that are fully defined, as dictated by the host language."
    },
    ":dir()": {
      "description": "The :dir() pseudo-class allows the author to write selectors that represent an element based on its directionality as determined by the document language. For example, [HTML5] defines how to determine the directionality of an element, based on a combination of the dir attribute, the surrounding text, and other factors. As another example, the its:dir and dirRule element of the Internationalization Tag Set [ITS20] are able to define the directionality of an element in [XML10]."
    },
    ":lang()": {
      "description": "If the document language specifies how the (human) content language of an element is determined, it is possible to write selectors that represent an element based on its content language. The :lang() pseudo-class, which accepts a comma-separated list of one or more language ranges, represents an element whose content language is one of the languages listed in its argument. Each language range in :lang() must be a valid CSS <ident> or <string>. (Thus language ranges containing asterisks, for example, must be either correctly escaped or quoted as strings, e.g. :lang(\\*-Latn) or :lang(\"*-Latn\").)"
    },
    ":any-link": {
      "description": "The :any-link pseudo-class represents an element that acts as the source anchor of a hyperlink. For example, in [HTML5], any a or area elements with an href attribute are hyperlinks, and thus match :any-link. It matches an element if the element would match either :link or :visited, and is equivalent to :is(:link, :visited)."
    },
    ":link": {
      "description": "User agents commonly display unvisited hyperlinks differently from previously visited ones. Selectors provides the pseudo-classes :link and :visited to distinguish them:"
    },
    ":visited": {
      "description": "User agents commonly display unvisited hyperlinks differently from previously visited ones. Selectors provides the pseudo-classes :link and :visited to distinguish them:"
    },
    ":local-link": {
      "description": "The :local-link pseudo-class allows authors to style hyperlinks based on the users current location within a site. It represents an element that is the source anchor of a hyperlink whose target’s absolute URL matches the element’s own document URL. If the hyperlink’s target includes a fragment URL, then the fragment URL of the current URL must also match; if it does not, then the fragment URL portion of the current URL is not taken into account in the comparison."
    },
    ":target": {
      "description": "The :target pseudo-class matches the document’s target elements. If the document’s URL has no fragment identifier, then the document has no target elements."
    },
    ":target-within": {
      "description": "The :target-within pseudo-class applies to any element to which the :target pseudo-class applies as well as to any element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :target."
    },
    ":scope": {
      "description": "In some contexts, selectors are matched with respect to one or more scoping roots, such as when calling the querySelector() method in [DOM]. The :scope pseudo-class represents this scoping root, and may be either a true element or a virtual one (such as a DocumentFragment)."
    },
    ":hover": {
      "description": "The :hover pseudo-class applies while the user designates an element (or pseudo-element) with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element. Interactive user agents that cannot detect hovering due to hardware limitations (e.g., a pen device that does not detect hovering) are still conforming; the selector will simply never match in such a UA."
    },
    ":active": {
      "description": "The :active pseudo-class applies while an element is being “activated” by the user, as defined by the host language; for example, while a hyperlink is being triggered."
    },
    ":focus": {
      "description": "The :focus pseudo-class applies while an element (or pseudo-element) has the focus (accepts keyboard or other forms of input)."
    },
    ":focus-visible": {
      "description": "While the :focus pseudo-class always matches the currently-focused element, UAs only sometimes visibly indicate focus (such as by drawing a “focus ring”), instead using a variety of heuristics to visibly indicate the focus only when it would be most helpful to the user. The :focus-visible pseudo-class matches a focused element (or pseudo-element) in these situations only, allowing authors to change the appearance of the focus indicator without changing when a focus indicator appears."
    },
    ":focus-within": {
      "description": "The :focus-within pseudo-class applies to any element (or pseudo-element) for which the :focus pseudo-class applies, as well as to an element (or pseudo-element) whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus."
    },
    ":current": {
      "description": "The :current pseudo-class represents the element, or an ancestor of the element, that is currently being displayed."
    },
    ":current()": {
      "description": "Its alternate form :current(), like :is(), takes a list of compound selectors as its argument: it represents the :current element that matches the argument or, if that does not match, the innermost ancestor of the :current element that does. (If neither the :current element nor its ancestors match the argument, then the selector does not represent anything.)"
    },
    ":past": {
      "description": "The :past pseudo-class represents any element that is defined to occur entirely prior to a :current element. For example, the WebVTT spec defines the :past pseudo-class relative to the current playback position of a media element. If a time-based order of elements is not defined by the document language, then this represents any element that is a (possibly indirect) previous sibling of a :current element."
    },
    ":future": {
      "description": "The :future pseudo-class represents any element that is defined to occur entirely after a :current element. For example, the WebVTT spec defines the :future pseudo-class relative to the current playback position of a media element. If a time-based order of elements is not defined by the document language, then this represents any element that is a (possibly indirect) next sibling of a :current element."
    },
    ":playing": {
      "description": "The :playing pseudo-class represents an element that is capable of being “played” or “paused”, when that element is “playing”. (This includes both when the element is explicitly playing, and when it’s temporarily stopped for some reason not connected to user intent, but will automatically resume when that reason is resolved, such as a “buffering” or “stalled” state.)"
    },
    ":paused": {
      "description": "The :paused pseudo-class represents an element that is capable of being “played” or “paused”, when that element is “paused” (i.e. not ”playing”). (This includes both an explicit “paused” state, and other non-playing states like “loaded, hasn’t been activated yet”, etc.)"
    },
    ":seeking": {
      "description": "The :seeking pseudo-class represents an element that is capable of ”seeking” when that element is ”seeking”. (For the audio and video elements of HTML, see HTML § 4.8.11.9 Seeking.)"
    },
    ":buffering": {
      "description": "The :buffering pseudo-class represents an element that is capable of being “played” or “paused”, when that element cannot continue playing because it is actively attempting to obtain media data but has not yet obtained enough data to resume playback. (Note that the element is still considered to be “playing” when it is “buffering”. Whenever :buffering matches an element, :playing also matches the element.)"
    },
    ":stalled": {
      "description": "The :stalled pseudo-class represents an element when that element cannot continue playing because it is actively attempting to obtain media data but it has failed to receive any data for some amount of time. For the audio and video elements of HTML, this amount of time is the media element stall timeout. [HTML] (Note that, like with the :buffering pseudo-class, the element is still considered to be “playing” when it is “stalled”. Whenever :stalled matches an element, :playing also matches the element.)"
    },
    ":muted": {
      "description": "The :muted pseudo-class represents an element that is capable of making sound, but is currently “muted“ (forced silent). (For the audio and video elements of HTML, see muted. [HTML])"
    },
    ":volume-locked": {
      "description": "The :volume-locked pseudo-class represents an element that is capable of making sound, and currently has its volume \"locked\" by the UA or the user, so the page author cannot change it. (For the audio and video elements of HTML, see the algorithm for setting the element’s effective media volume. [HTML])"
    },
    ":open": {
      "description": "The :open pseudo-class represents an element that has both “open” and “closed” states, and which is currently in the “open” state."
    },
    ":popover-open": {
      "description": "The :popover-open pseudo-class represents an element that has both “popover-showing” and “popover-hidden” states and which is currently in the “popover-showing” state."
    },
    ":modal": {
      "description": "The :modal pseudo-class represents an element which is in a state that excludes all interaction with elements outside it until it has been dismissed. Multiple elements can be :modal simultaneously, with only one of them active (able to receive input)."
    },
    ":fullscreen": {
      "description": "The :fullscreen pseudo-class represents an element which is displayed in a mode that takes up most (usually all) of the screen, such as that defined by the Fullscreen API. [FULLSCREEN]"
    },
    ":picture-in-picture": {
      "description": "The :picture-in-picture pseudo-class represents an element which is displayed in a mode that takes up most (usually all) of the viewport, and whose viewport is confined to part of the screen while being displayed over other content, for example when using the Picture-in-Picture API. [picture-in-picture]"
    },
    ":enabled": {
      "description": "The :enabled pseudo-class represents user interface elements that are in an enabled state; such elements must have a corresponding disabled state."
    },
    ":disabled": {
      "description": "Conversely, the :disabled pseudo-class represents user interface elements that are in a disabled state; such elements must have a corresponding enabled state."
    },
    ":read-write": {
      "description": "An element matches :read-write if it is user-alterable, as defined by the document language. Otherwise, it is :read-only."
    },
    ":read-only": {
      "description": "An element matches :read-write if it is user-alterable, as defined by the document language. Otherwise, it is :read-only."
    },
    ":placeholder-shown": {
      "description": "Input elements can sometimes show placeholder text as a hint to the user on what to type in. See, for example, the placeholder attribute in [HTML5]. The :placeholder-shown pseudo-class matches an input element that is showing such placeholder text, whether that text is given by an attribute or a real element, or is otherwise implied by the UA."
    },
    ":autofill": {
      "description": "The :autofill pseudo-class represents input elements that have been automatically filled by the user agent, and have not been subsequently altered by the user."
    },
    ":default": {
      "description": "The :default pseudo-class applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons and select lists/menus."
    },
    ":checked": {
      "description": "Radio and checkbox elements can be toggled by the user. Some menu items are “checked” when the user selects them. When such elements are toggled “on” the :checked pseudo-class applies. For example, [HTML5] defines that checked checkboxes, radio buttons, and selected <option> elements match :checked."
    },
    ":indeterminate": {
      "description": "The :indeterminate pseudo-class applies to UI elements whose value is in an indeterminate state. For example, radio and checkbox elements can be toggled between checked and unchecked states, but are sometimes in an indeterminate state, neither checked nor unchecked. Similarly a progress meter can be in an indeterminate state when the percent completion is unknown. For example, [HTML5] defines how checkboxes can be made to match :indeterminate."
    },
    ":blank": {
      "description": "The :blank pseudo-class applies to user-input elements whose input value is empty (consists of the empty string or otherwise null input)."
    },
    ":valid": {
      "description": "An element is :valid or :invalid when its contents or value is, respectively, valid or invalid with respect to data validity semantics defined by the document language (e.g. [XFORMS11] or [HTML5]). An element which lacks data validity semantics is neither :valid nor :invalid."
    },
    ":invalid": {
      "description": "An element is :valid or :invalid when its contents or value is, respectively, valid or invalid with respect to data validity semantics defined by the document language (e.g. [XFORMS11] or [HTML5]). An element which lacks data validity semantics is neither :valid nor :invalid."
    },
    ":in-range": {
      "description": "The :in-range and :out-of-range pseudo-classes apply only to elements that have range limitations. An element is :in-range or :out-of-range when the value that the element is bound to is in range or out of range with respect to its range limits as defined by the document language. An element that lacks data range limits or is not a form control is neither :in-range nor :out-of-range. E.g. a slider element with a value of 11 presented as a slider control that only represents the values from 1-10 is :out-of-range. Another example is a menu element with a value of \"E\" that happens to be presented in a popup menu that only has choices \"A\", \"B\" and \"C\"."
    },
    ":out-of-range": {
      "description": "The :in-range and :out-of-range pseudo-classes apply only to elements that have range limitations. An element is :in-range or :out-of-range when the value that the element is bound to is in range or out of range with respect to its range limits as defined by the document language. An element that lacks data range limits or is not a form control is neither :in-range nor :out-of-range. E.g. a slider element with a value of 11 presented as a slider control that only represents the values from 1-10 is :out-of-range. Another example is a menu element with a value of \"E\" that happens to be presented in a popup menu that only has choices \"A\", \"B\" and \"C\"."
    },
    ":required": {
      "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to can be validly submitted. Elements that are not form elements are neither required nor optional."
    },
    ":optional": {
      "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to can be validly submitted. Elements that are not form elements are neither required nor optional."
    },
    ":user-invalid": {
      "description": "The :user-invalid and the :user-valid pseudo-classes represent an element with incorrect or correct input, respectively, but only after the user has significantly interacted with it. Their purpose is to help the user identify mistakes in their input."
    },
    ":user-valid": {
      "description": "The :user-invalid and the :user-valid pseudo-classes represent an element with incorrect or correct input, respectively, but only after the user has significantly interacted with it. Their purpose is to help the user identify mistakes in their input."
    },
    ":root": {
      "description": "The :root pseudo-class represents an element that is the root of the document."
    },
    ":empty": {
      "description": "The :empty pseudo-class represents an element that has no children except, optionally, document white space characters. In terms of the document tree, only element nodes and content nodes (such as [DOM] text nodes, and entity references) whose data has a non-zero length must be considered as affecting emptiness; comments, processing instructions, and other nodes must not affect whether an element is considered empty or not."
    },
    ":nth-child()": {
      "description": ""
    },
    ":nth-last-child()": {
      "description": ""
    },
    ":first-child": {
      "description": "The :first-child pseudo-class represents an element that if first among its inclusive siblings. Same as :nth-child(1)."
    },
    ":last-child": {
      "description": "The :last-child pseudo-class represents an element that is last among its inclusive siblings. Same as :nth-last-child(1)."
    },
    ":only-child": {
      "description": "The :only-child pseudo-class represents an element that has no siblings. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
    },
    ":nth-of-type()": {
      "description": ""
    },
    ":nth-last-of-type()": {
      "description": ""
    },
    ":first-of-type": {
      "description": "The :first-of-type pseudo-class represents the same element as :nth-of-type(1)."
    },
    ":last-of-type": {
      "description": "The :last-of-type pseudo-class represents the same element as :nth-last-of-type(1)."
    },
    ":only-of-type": {
      "description": "The :only-of-type pseudo-class represents the same element as :first-of-type:last-of-type."
    },
    ">": {
      "description": "A child combinator describes a childhood relationship between two elements. A child combinator is made of the \"greater-than sign\" (U+003E, >) code point and separates two compound selectors."
    },
    "+": {
      "description": "The next-sibling combinator is made of the “plus sign” (U+002B, +) code point that separates two compound selectors. The elements represented by the two compound selectors share the same parent in the document tree and the element represented by the first compound selector immediately precedes the element represented by the second one. Non-element nodes (e.g. text between elements) are ignored when considering the adjacency of elements."
    },
    "~": {
      "description": "The subsequent-sibling combinator is made of the \"tilde\" (U+007E, ~) code point that separates two compound selectors. The elements represented by the two compound selectors share the same parent in the document tree and the element represented by the first compound selector precedes (not necessarily immediately) the element represented by the second one."
    },
    "||": {
      "description": "The column combinator, which consists of two pipes (||) represents the relationship of a column element to a cell element belonging to the column it represents. Column membership is determined based on the semantics of the document language only: whether and how the elements are presented is not considered. If a cell element belongs to more than one column, it is represented by a selector indicating membership in any of those columns."
    },
    ":nth-col()": {
      "description": ""
    },
    ":nth-last-col()": {
      "description": ""
    },
    "::first-line": {
      "description": "The ::first-line pseudo-element represents the contents of the first formatted line of its originating element."
    },
    "::first-letter": {
      "description": "The ::first-letter pseudo-element represents the first Letter, Number, or Symbol (Unicode category L*, N*, or S*) typographic character unit on the first formatted line of its originating element (the first letter) as well as its associated punctuation. Collectively, this text is the first-letter text. The ::first-letter pseudo-element can be used to create “initial caps” and “drop caps”, which are common typographic effects."
    },
    "::selection": {
      "description": "The ::selection pseudo-element represents the portion of a document that has been selected as the target or object of some possible future user-agent operation(s). It applies, for example, to selected text within an editable text field, which would be copied by a copy operation or replaced by a paste operation."
    },
    "::search-text": {
      "description": "The ::search-text pseudo-element represents text identified by the user agent’s find-in-page feature. Since not all UAs style matched text in ways expressible with the highlight pseudo-elements, this pseudo-element is optional to implement. How to identify the current match? [Issue #10527]"
    },
    "::target-text": {
      "description": "The ::target-text pseudo-element represents text directly targeted by the document URL’s fragment, if any."
    },
    "::spelling-error": {
      "description": "The ::spelling-error pseudo-element represents a portion of text that has been flagged by the user agent as misspelled."
    },
    "::grammar-error": {
      "description": "The ::grammar-error pseudo-element represents a portion of text that has been flagged by the user agent as grammatically incorrect."
    },
    "::highlight()": {
      "description": ""
    },
    "::before": {
      "description": "Represents a styleable child pseudo-element immediately before the originating element’s actual content."
    },
    "::after": {
      "description": "Represents a styleable child pseudo-element immediately after the originating element’s actual content."
    },
    "::marker": {
      "description": "The ::marker pseudo-element represents the automatically generated marker box of a list item. (See [CSS-DISPLAY-3] and [CSS-LISTS-3].)"
    },
    "::placeholder": {
      "description": "The ::placeholder pseudo-element represents placeholder text in an input field: text that represents the input and provides a hint to the user on how to fill out the form. For example, a date-input field might have the placeholder text “YYYY/MM/DD” to clarify that numeric dates are to be entered in year-month-day order. It is a tree-abiding pseudo-element."
    },
    "::file-selector-button": {
      "description": "The ::file-selector-button pseudo-element targets the <button> inside an <input> element with type=file, if the UA renders such a button. It is an element-backed pseudo-element."
    },
    "::details-content": {
      "description": "The ::details-content pseudo-element targets the additional information in a a details element that can be expanded or collapsed. It is an element-backed pseudo-element."
    }
  }
}