name: Package tests for Pulsar on Linux
on:
  - pull_request
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ATOM_JASMINE_REPORTER: list
jobs:
  test:
    name: run tests
    if: |
      !startsWith(github.event.pull_request.title, '[skip-ci]') &&
      !startsWith(github.event.pull_request.title, '[skip-package-ci]')
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2-beta
      with:
        node-version: 16

    - name: Install Dependencies
      run: yarn install

    - name: Build Dependencies
      run: yarn build

    - name: build dependencies
      run: yarn build:apm

    - name: build the editor
      run: (yarn dist deb || yarn dist deb) && mv binaries/*deb pulsar.deb

    - name: install Pulsar
      run: sudo dpkg -i pulsar.deb && sudo apt-get -f install -y

    - name: Install xvfb
      run: sudo apt-get install -y xvfb

    - name: run tests
      uses: actions/github-script@v6
      with:
        script: |
          const cp = require("child_process");
          const fs = require("fs");

          const packages = fs.readdirSync("packages");

          const xvfb = cp.spawn("Xvfb", [":1"]);

          const results = packages.map(package => {
            let result;

            if (!fs.existsSync(`node_modules/${package}/spec`)) return false;

            console.log(`::group::tests for ${package}`);
            try {
              cp.execSync(
                `cd node_modules/${package} && if test -d spec; then DISPLAY=:1 pulsar --test spec; fi`,
                { stdio: "inherit" }
              );
              result = [package, true];
            } catch (err) {
              result = [package, false];
            }
            console.log("::endgroup::");
            if (!result[1]) console.log(`::error title=${package}::tests for ${package} failed`);

            return result;
          }).filter(v => v);

          xvfb.kill("SIGINT");

          if (!results.every(v => v[1])) {
            let failed = results.filter(v => !v[1]).map(p => p[0]).join(", ");
            core.setFailed(`one or more tests failed: ${failed}`);
          }
